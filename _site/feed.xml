<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rakib Hasan's Blog</title>
    <description>Rakib's Learning &amp; Blogs</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 04 Apr 2018 14:24:13 +0600</pubDate>
    <lastBuildDate>Wed, 04 Apr 2018 14:24:13 +0600</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Design Pattern</title>
        <description>&lt;h2 id=&quot;design-pattern&quot;&gt;Design Pattern&lt;/h2&gt;
&lt;p&gt;A design pattern is a well described solution to a common software problem.&lt;/p&gt;

&lt;h5 id=&quot;advantage-of-design-pattern&quot;&gt;Advantage of design pattern:&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;They are reusable in multiple projects.&lt;/li&gt;
  &lt;li&gt;They provide the solutions that help to define the system architecture.&lt;/li&gt;
  &lt;li&gt;They capture the software engineering experiences.&lt;/li&gt;
  &lt;li&gt;They provide transparency to the design of an application.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;when-should-we-use-the-design-patterns&quot;&gt;When should we use the design patterns?&lt;/h5&gt;
&lt;p&gt;We must use the design patterns during the analysis and requirement phase of SDLC(Software Development Life Cycle).&lt;/p&gt;

&lt;p&gt;Creational Design Patterns&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Singleton Pattern&lt;/li&gt;
  &lt;li&gt;Factory Pattern&lt;/li&gt;
  &lt;li&gt;Abstract Factory Pattern&lt;/li&gt;
  &lt;li&gt;Builder Pattern
5.Prototype Pattern&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Structural Design Patterns&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Adapter Pattern&lt;/li&gt;
  &lt;li&gt;Composite Pattern&lt;/li&gt;
  &lt;li&gt;Proxy Pattern&lt;/li&gt;
  &lt;li&gt;Flyweight Pattern&lt;/li&gt;
  &lt;li&gt;Facade Pattern&lt;/li&gt;
  &lt;li&gt;Bridge Pattern&lt;/li&gt;
  &lt;li&gt;Decorator Pattern&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Behavioral Design Patterns&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Template Method Pattern&lt;/li&gt;
  &lt;li&gt;Mediator Pattern&lt;/li&gt;
  &lt;li&gt;Chain of Responsibility Pattern&lt;/li&gt;
  &lt;li&gt;Observer Pattern&lt;/li&gt;
  &lt;li&gt;Strategy Pattern&lt;/li&gt;
  &lt;li&gt;Command Pattern&lt;/li&gt;
  &lt;li&gt;State Pattern&lt;/li&gt;
  &lt;li&gt;Visitor Pattern&lt;/li&gt;
  &lt;li&gt;Interpreter Pattern&lt;/li&gt;
  &lt;li&gt;Iterator Pattern&lt;/li&gt;
  &lt;li&gt;Memento Pattern&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.javatpoint.com/design-patterns-in-java&quot;&gt;Java Point&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Mar 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/03/09/design-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/09/design-pattern/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>SDKMAN</title>
        <description>&lt;h2 id=&quot;sdkman&quot;&gt;SDKMAN&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;GIT&lt;/li&gt;
  &lt;li&gt;JAVA&lt;/li&gt;
  &lt;li&gt;http://sdkman.io/&lt;/li&gt;
  &lt;li&gt;Multi-platform-&amp;gt; Powershell CLI version&lt;/li&gt;
  &lt;li&gt;Open powershell from windows pc then type
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [Environment]::GetEnvironmentVariable(&quot;PSModulePath&quot;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Then get the following&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  C:\Users\rakib\OneDrive\Documents\WindowsPowerShell\Modules;C:\Program Files\WindowsPowerShell\Modules;C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Then Type&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; New-Item C:\Users\rakib\OneDrive\Documents\WindowsPowerShell\Modules -ItemType Directory
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then Type&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   cd C:\Users\rakib\OneDrive\Documents\WindowsPowerShell\Modules
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then clone by&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   git clone https://github.com/flofreud/posh-gvm.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then Type&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;New-Item -path $profile -type file -force
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Close power shell &amp;amp; open in administrator mode &amp;amp; Then Type&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Install-Module posh-gvm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then type&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set-ExecutionPolicy RemoteSigned
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/14/sdkman/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/14/sdkman/</guid>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>DRY</title>
        <description>&lt;h2 id=&quot;dry-dont-repeat-yourself&quot;&gt;DRY (Donâ€™t Repeat Yourself)&lt;/h2&gt;

&lt;h5 id=&quot;in-wikipedia&quot;&gt;In Wikipedia&lt;/h5&gt;
&lt;p&gt;DRY- A Principle of software development, aimed at reducing repetition of information of all kinds.&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/14/dry/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/14/dry/</guid>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>Java-Stream</title>
        <description>&lt;h2 id=&quot;stream&quot;&gt;Stream&lt;/h2&gt;

&lt;h5 id=&quot;in-wikipedia&quot;&gt;In Wikipedia&lt;/h5&gt;
&lt;p&gt;DRY- A Principle of software development, aimed at reducing repetition of information of all kinds.&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/14/stream/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/14/stream/</guid>
        
        
        <category>java89</category>
        
      </item>
    
      <item>
        <title>Singleton Pattern</title>
        <description>&lt;h2 id=&quot;singleton-pattern&quot;&gt;Singleton Pattern&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Singleton pattern restricts the instantiation of a class and ensures that only one instance of the class exists in the java virtual machine.&lt;/li&gt;
  &lt;li&gt;The singleton class must provide a global access point to get the instance of the class.&lt;/li&gt;
  &lt;li&gt;Singleton pattern is used for logging, drivers objects, caching and thread pool.&lt;/li&gt;
  &lt;li&gt;Singleton design pattern is also used in other design patterns like Abstract Factory, Builder, Prototype, Facade etc.&lt;/li&gt;
  &lt;li&gt;Singleton design pattern is used in core java classes also, for example java.lang.Runtime, java.awt.Desktop.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;java-singleton-pattern-implementation&quot;&gt;Java Singleton Pattern Implementation&lt;/h4&gt;
&lt;p&gt;To implement Singleton pattern, we have different approaches but all of them have following common concepts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Private constructor to restrict instantiation of the class from other classes.&lt;/li&gt;
  &lt;li&gt;Private static variable of the same class that is the only instance of the class.&lt;/li&gt;
  &lt;li&gt;Public static method that returns the instance of the class, this is the global access point for outer world to get the instance of the singleton class.
    &lt;h5 id=&quot;different-approaches-of-singleton-pattern-implementation&quot;&gt;Different approaches of Singleton pattern implementation&lt;/h5&gt;
    &lt;ol&gt;
      &lt;li&gt;Eager initialization&lt;/li&gt;
      &lt;li&gt;Static block initialization&lt;/li&gt;
      &lt;li&gt;Lazy Initialization&lt;/li&gt;
      &lt;li&gt;Thread Safe Singleton&lt;/li&gt;
      &lt;li&gt;Bill Pugh Singleton Implementation&lt;/li&gt;
      &lt;li&gt;Using Reflection to destroy Singleton Pattern&lt;/li&gt;
      &lt;li&gt;Enum Singleton&lt;/li&gt;
      &lt;li&gt;Serialization and Singleton&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;eager-initialization&quot;&gt;Eager initialization&lt;/h4&gt;
&lt;p&gt;In eager initialization, the instance of Singleton Class is created at the time of class loading, this is the easiest method to create a singleton class but it has a drawback that instance is created even though client application might not be using it.
Here is the implementation of static initialization singleton class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class EagerInitializedSingleton {
    
    private static final EagerInitializedSingleton instance = new EagerInitializedSingleton();
    
    //private constructor to avoid client applications to use constructor
    private EagerInitializedSingleton(){}

    public static EagerInitializedSingleton getInstance(){
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If your singleton class is not using a lot of resources, this is the approach to use. But in most of the scenarios, Singleton classes are created for resources such as File System, Database connections etc and we should avoid the instantiation until unless client calls the getInstance method. Also, this method doesnâ€™t provide any options for exception handling.&lt;/p&gt;
&lt;h4 id=&quot;static-block-initialization&quot;&gt;Static block initialization&lt;/h4&gt;
&lt;p&gt;Static block initialization implementation is similar to eager initialization, except that instance of class is created in the static block that provides option for exception handling.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class StaticBlockSingleton {

    private static StaticBlockSingleton instance;
    
    private StaticBlockSingleton(){}
    
    //static block initialization for exception handling
    static{
        try{
            instance = new StaticBlockSingleton();
        }catch(Exception e){
            throw new RuntimeException(&quot;Exception occured in creating singleton instance&quot;);
        }
    }
    
    public static StaticBlockSingleton getInstance(){
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Both eager initialization and static block initialization creates the instance even before itâ€™s being used and that is not the best practice to use. So in further sections, we will learn how to create Singleton class that supports lazy initialization.&lt;/p&gt;

&lt;h4 id=&quot;lazy-initialization&quot;&gt;Lazy Initialization&lt;/h4&gt;
&lt;p&gt;Lazy initialization method to implement Singleton pattern creates the instance in the global access method. Here is the sample code for creating Singleton class with this approach.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class LazyInitializedSingleton {

    private static LazyInitializedSingleton instance;
    
    private LazyInitializedSingleton(){}
    
    public static LazyInitializedSingleton getInstance(){
        if(instance == null){
            instance = new LazyInitializedSingleton();
        }
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above implementation works fine incase of single threaded environment but when it comes to multithreaded systems, it can cause issues if multiple threads are inside the if loop at the same time. It will destroy the singleton pattern and both threads will get the different instances of singleton class. In next section, we will see different ways to create a thread-safe singleton class.&lt;/p&gt;
&lt;h4 id=&quot;thread-safe-singleton&quot;&gt;Thread Safe Singleton&lt;/h4&gt;
&lt;p&gt;The easier way to create a thread-safe singleton class is to make the global access method synchronized, so that only one thread can execute this method at a time. General implementation of this approach is like the below class.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class ThreadSafeSingleton {

    private static ThreadSafeSingleton instance;
    
    private ThreadSafeSingleton(){}
    
    public static synchronized ThreadSafeSingleton getInstance(){
        if(instance == null){
            instance = new ThreadSafeSingleton();
        }
        return instance;
    }
    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Above implementation works fine and provides thread-safety but it reduces the performance because of cost associated with the synchronized method, although we need it only for the first few threads who might create the separate instances (Read: Java Synchronization). To avoid this extra overhead every time, double checked locking principle is used. In this approach, the synchronized block is used inside the if condition with an additional check to ensure that only one instance of singleton class is created.
Below code snippet provides the double checked locking implementation.
public static ThreadSafeSingleton getInstanceUsingDoubleLocking(){
    if(instance == null){
        synchronized (ThreadSafeSingleton.class) {
            if(instance == null){
                instance = new ThreadSafeSingleton();
            }
        }
    }
    return instance;
}&lt;/p&gt;

&lt;h4 id=&quot;bill-pugh-singleton-implementation&quot;&gt;Bill Pugh Singleton Implementation&lt;/h4&gt;
&lt;p&gt;Prior to Java 5, java memory model had a lot of issues and above approaches used to fail in certain scenarios where too many threads try to get the instance of the Singleton class simultaneously. So Bill Pugh came up with a different approach to create the Singleton class using a inner static helper class. The Bill Pugh Singleton implementation goes like this;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class BillPughSingleton {

    private BillPughSingleton(){}
    
    private static class SingletonHelper{
        private static final BillPughSingleton INSTANCE = new BillPughSingleton();
    }
    
    public static BillPughSingleton getInstance(){
        return SingletonHelper.INSTANCE;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice the private inner static class that contains the instance of the singleton class. When the singleton class is loaded, SingletonHelper class is not loaded into memory and only when someone calls the getInstance method, this class gets loaded and creates the Singleton class instance.
This is the most widely used approach for Singleton class as it doesnâ€™t require synchronization. I am using this approach in many of my projects and itâ€™s easy to understand and implement also.&lt;/p&gt;

&lt;h4 id=&quot;advantage-of-singleton-design-pattern&quot;&gt;Advantage of Singleton design pattern&lt;/h4&gt;
&lt;p&gt;Saves memory because object is not created at each request. Only single instance is reused again and again.&lt;/p&gt;
&lt;h4 id=&quot;usage-of-singleton-design-pattern&quot;&gt;Usage of Singleton design pattern&lt;/h4&gt;
&lt;p&gt;Singleton pattern is mostly used in multi-threaded and database applications. It is used in logging, caching, thread pools, configuration settings etc.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-examples?utm_source=website&amp;amp;utm_medium=sidebar&amp;amp;utm_campaign=DesignPattern-Sidebar-Widget&quot;&gt;&lt;strong&gt;JournalDev&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/01/singleton-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/01/singleton-pattern/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Facade Pattern</title>
        <description>&lt;h2 id=&quot;facade-pattern&quot;&gt;Facade Pattern&lt;/h2&gt;
&lt;p&gt;Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system. This type of design pattern comes under structural pattern as this pattern adds an interface to existing system to hide its complexities.&lt;/p&gt;

&lt;p&gt;This pattern involves a single class which provides simplified methods required by client and delegates calls to methods of existing system classes.&lt;/p&gt;

&lt;h4 id=&quot;implementation&quot;&gt;Implementation&lt;/h4&gt;
&lt;p&gt;We are going to create a Shape interface and concrete classes implementing the Shape interface. A facade class ShapeMaker is defined as a next step.&lt;/p&gt;

&lt;p&gt;ShapeMaker class uses the concrete classes to delegate user calls to these classes. FacadePatternDemo, our demo class, will use ShapeMaker class to show the results.&lt;/p&gt;

&lt;p&gt;Facade Pattern UML Diagram
&lt;img src=&quot;../../static/img/facade_pattern.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;step-1-create-an-interface&quot;&gt;Step 1 Create an interface.&lt;/h5&gt;

&lt;p&gt;Shape.java&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface Shape {
   void draw();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;step-2-create-concrete-classes-implementing-the-same-interface&quot;&gt;Step 2 Create concrete classes implementing the same interface.&lt;/h5&gt;

&lt;p&gt;Rectangle.java&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Rectangle implements Shape {

   @Override
   public void draw() {
      System.out.println(&quot;Rectangle::draw()&quot;);
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Square.java&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Square implements Shape {

   @Override
   public void draw() {
      System.out.println(&quot;Square::draw()&quot;);
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Circle.java&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Circle implements Shape {

   @Override
   public void draw() {
      System.out.println(&quot;Circle::draw()&quot;);
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;step-3-create-a-facade-class&quot;&gt;Step 3 Create a facade class.&lt;/h5&gt;

&lt;p&gt;ShapeMaker.java&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ShapeMaker {
   private Shape circle;
   private Shape rectangle;
   private Shape square;

   public ShapeMaker() {
      circle = new Circle();
      rectangle = new Rectangle();
      square = new Square();
   }

   public void drawCircle(){
      circle.draw();
   }
   public void drawRectangle(){
      rectangle.draw();
   }
   public void drawSquare(){
      square.draw();
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;step-4-use-the-facade-to-draw-various-types-of-shapes&quot;&gt;Step 4 Use the facade to draw various types of shapes.&lt;/h5&gt;

&lt;p&gt;FacadePatternDemo.java&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class FacadePatternDemo {
   public static void main(String[] args) {
      ShapeMaker shapeMaker = new ShapeMaker();

      shapeMaker.drawCircle();
      shapeMaker.drawRectangle();
      shapeMaker.drawSquare();		
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;step-5-verify-the-output&quot;&gt;Step 5 Verify the output.&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Circle::draw()
Rectangle::draw()
Square::draw()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.tutorialspoint.com/design_pattern/facade_pattern.htm&quot;&gt;tutorialspoint&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/01/facade-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/01/facade-pattern/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Difference</title>
        <description>&lt;h2 id=&quot;difference&quot;&gt;Difference&lt;/h2&gt;
&lt;h3 id=&quot;equals-vs-&quot;&gt;equals vs â€˜==â€™&lt;/h3&gt;

&lt;p&gt;In General We use == operator for reference or memory location comparision 
whereas .equals() method for content comparision.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String s1 = new String(&quot;rakib&quot;);
String s2 = new String(&quot;rakib&quot;);
System.out.println(s1==s2);         // false
System.out.println(s1.equals(s2));  // true

StringBuffer sf1 = new StringBuffer(&quot;rakib&quot;);
StringBuffer sf2 = new StringBuffer(&quot;rakib&quot;);
System.out.println(sf1 == sf2);     // false
System.out.println(s1 == sf2);     // CE: incomparable types: java.lang.String and java.lang.StringBuffer
System.out.println(s1.equals(sf2));     // false

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;.euals() method present in object class also meant for reference comparision only based on our requirement we can override for content comparision.&lt;/li&gt;
  &lt;li&gt;In String class, all wrapper class and all collection classes .equals() method is overriden for content comparision.&lt;/li&gt;
  &lt;li&gt;If r1 == r2 is true then r1.equals(r2) is always true.&lt;/li&gt;
  &lt;li&gt;If two objects are not equal by == operator then we canâ€™t conclude anything about .equals method. It may return true or false. 
 ie. if r1 == r2 is false then r1.equals(r2) may return true or false&lt;/li&gt;
  &lt;li&gt;If r1.equals(r2) is true then r1 == r2 may true or false&lt;/li&gt;
  &lt;li&gt;if r1.equals(r2) is false then r1 == r2 is always&lt;/li&gt;
  &lt;li&gt;Either parent to child or Child to parent are same type&lt;/li&gt;
  &lt;li&gt;r == null &amp;amp;&amp;amp; r.equals(null) return false&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/01/deffierence/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/01/deffierence/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Collection Framework</title>
        <description>&lt;h2 id=&quot;collection-framework&quot;&gt;Collection Framework&lt;/h2&gt;

&lt;h4 id=&quot;list-vs-arraylist&quot;&gt;List vs ArrayList&lt;/h4&gt;
&lt;p&gt;List is in interface while ArrayList is a class.&lt;/p&gt;

&lt;h5 id=&quot;why-store-arraylist-object-on-list-variable&quot;&gt;Why store ArrayList object on List variable?&lt;/h5&gt;
&lt;p&gt;You might have seen something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;List&amp;lt;Movie&amp;gt; listOfMovies = new ArrayList&amp;lt;Movie&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;here we are using a List as a type of variable to store an object of ArrayList class, created using new() operator.&lt;/p&gt;

&lt;p&gt;The answer is to take advantage of Polymorphism. If you use interface than in future if the new implementation is shipped then you are not required to change your program. For example, any program written using List will work as expected whether you pass a LinkedList, Vector or ArrayList, because they all implements List interface, they obey the contract exposed by List interface.&lt;/p&gt;

&lt;p&gt;The only difference comes in performance, which is actually on of the driver for change. In short, if you program using interface, tomorrow if a better implementation of your interface is available then you can switch to that without making nay further change on the client side (part of the program which uses that interface).&lt;/p&gt;

&lt;h4 id=&quot;arraylist-vs-linklist&quot;&gt;ArrayList vs LinkList&lt;/h4&gt;

&lt;p&gt;Performance  :  Performance of ArrayList and LinkedList depends on the type of operation&lt;/p&gt;

&lt;p&gt;a. get(int index) or search operation :  ArrayList get(int index) operation runs in constant time i.e O(1)  while LinkedList get(int index) operation run time is O(n) .&lt;/p&gt;

&lt;p&gt;b. insert() or add(Object) operation :  Insertions in LinkedList are generally fast as compare to ArrayList.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Â &lt;/th&gt;
      &lt;th&gt;ArrayList&lt;/th&gt;
      &lt;th&gt;LinkedList&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Implementation&lt;/td&gt;
      &lt;td&gt;Resizable Array&lt;/td&gt;
      &lt;td&gt;Douby-LinkedList&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ReverseIterator&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes , descendingIterator()&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Initial Capacity&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;Constructs empty list&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;get(int) operation&lt;/td&gt;
      &lt;td&gt;Fast&lt;/td&gt;
      &lt;td&gt;Slow in comparision&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;add(int) operation&lt;/td&gt;
      &lt;td&gt;Slow in comparision&lt;/td&gt;
      &lt;td&gt;Fast&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Memory Overhead&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/01/collection-framwork/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/01/collection-framwork/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Pictures</title>
        <description>&lt;p&gt;##HELPFUL ROUNDUP FOR STOCK PHOTO NEEDS&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;WOCinTech Chat â€“ An amazing collection of beautiful, high-res photos of women of color in tech&lt;/li&gt;
  &lt;li&gt;Pixabay   â€“ Over 900,000 free images and videos for you to use&lt;/li&gt;
  &lt;li&gt;Pexels  â€“ All free images, all available for personal and commercial use&lt;/li&gt;
  &lt;li&gt;Unsplash â€“ Browse and search the latest high-resolution photos&lt;/li&gt;
  &lt;li&gt;Stocksnap.io  â€“ Hundreds of high-res photos are added weekly!&lt;/li&gt;
  &lt;li&gt;Gratysography â€“ All images are photographed by Ryan McGuire, and free of copyright restrictions&lt;/li&gt;
  &lt;li&gt;Foter â€“ 335 million stock photos to choose from and a handy WordPress plugin&lt;/li&gt;
  &lt;li&gt;FreeimagesRed â€“ Search their inventory of high-quality stock photos across a variety of categories&lt;/li&gt;
  &lt;li&gt;Cupcake â€“ Free original images by photographer Jonas Nilsson Lee to use however you like&lt;/li&gt;
  &lt;li&gt;Death to Stock â€“ Sign up to get free, high-res photos sent directly to your inbox&lt;/li&gt;
  &lt;li&gt;DesignerPics â€“ Free high-res photos for personal and commercial use by photographer, web designer, and developer, Jeshu John&lt;/li&gt;
  &lt;li&gt;Foodiesfeed â€“ The ultimate hub for beautiful food stock photos&lt;/li&gt;
  &lt;li&gt;Iso Republic â€“ Specializes in free stock photos for creatives&lt;/li&gt;
  &lt;li&gt;Magdeleine â€“ Hand picked, high-res photos just for you. The website also highlights a new photographer and photo every day&lt;/li&gt;
  &lt;li&gt;Moveast â€“ Beautiful photos of JoÃ£o Pachecoâ€™s travel adventures, free to use&lt;/li&gt;
  &lt;li&gt;Stokpic â€“ High-resolution photos for commercial use&lt;/li&gt;
  &lt;li&gt;Travel coffee book â€“  Browse and submit your own beautiful travel photos for personal and commercial use&lt;/li&gt;
  &lt;li&gt;Stockvault â€“ Over 50,000 photos, vectors, illustrations, and textures&lt;/li&gt;
  &lt;li&gt;Startup stock photos â€“ Images for startups and businesses&lt;/li&gt;
  &lt;li&gt;Splitshire â€“ Free photos, images, and videos for commercial use&lt;/li&gt;
  &lt;li&gt;Splashbase â€“ Discover high-res photos and videos&lt;/li&gt;
  &lt;li&gt;Snapwire Snaps â€“ Search, submit, and subscribe to receive 7 free beautiful photos every 7 days&lt;/li&gt;
  &lt;li&gt;RGB Stock â€“ Search over 100,000 photos and all are 100% free&lt;/li&gt;
  &lt;li&gt;Publicdomainarchive â€“ Look for 100% free stock photos uploaded every single week&lt;/li&gt;
  &lt;li&gt;Skitterphoto â€“ All photos available to download, edit, and to use however you wish&lt;/li&gt;
  &lt;li&gt;Re:splashed â€“ 1,100+ free high-res photos for web and design projects&lt;/li&gt;
  &lt;li&gt;Raumrot â€“ 1,450 free curated stock photos for personal and commercial use&lt;/li&gt;
  &lt;li&gt;Picography â€“ Free images and collections by the folks at Hidden Depth&lt;/li&gt;
  &lt;li&gt;Pickupimage  â€“ Register to download, modify, and distribute this huge collection of free photos&lt;/li&gt;
  &lt;li&gt;Pickjumbo â€“ Super high-quality photos collected by photographer and designer Viktor Hanacek&lt;/li&gt;
  &lt;li&gt;Morguefile â€“ Free images for creatives, by creatives&lt;/li&gt;
  &lt;li&gt;MMT â€“ Free photos for commercial use and new photos every week&lt;/li&gt;
  &lt;li&gt;Kaboompics â€“ Free pictures for personal or business projects&lt;/li&gt;
  &lt;li&gt;Free Nature Stock â€“ Large collection of free nature photos, with new pictures added every day&lt;/li&gt;
  &lt;li&gt;Barn images â€“ Original free stock photos by Latvian photographers Igor Trepeshchenok and Roman Drits&lt;/li&gt;
  &lt;li&gt;Jeshoots â€“ Browse this collection of free photos and mockups&lt;/li&gt;
  &lt;li&gt;BucketListly Photos  â€“ Common collection of 5,000+ free travel photos&lt;/li&gt;
  &lt;li&gt;Photo Collections â€“ Discover high-resolution photos in seven collections&lt;/li&gt;
  &lt;li&gt;Tookapic â€“ Browse over 64,000 free, non-staged stock photos&lt;/li&gt;
  &lt;li&gt;NegativeSpace â€“ Search by keyword, color, or browse categories and collections&lt;/li&gt;
  &lt;li&gt;Epicantusâ€“ Free, original stock photos for blogs, landing pages, and designs by UX designer Daria&lt;/li&gt;
  &lt;li&gt;Libresho â€“ More than 1,500 high-quality photos available for personal and commercial use&lt;/li&gt;
  &lt;li&gt;New Old Stock â€“ Donâ€™t forget the oldiesâ€”hereâ€™s a collection of vintage photos from public archives&lt;/li&gt;
  &lt;li&gt;Jay Mantri â€“ Browse and subscribe to receive free stock photos by photographer Jay Mantri&lt;/li&gt;
  &lt;li&gt;Burst â€“ A collection of free stock photos for entrepreneurs by our friends at Shopify&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;https://www.upwork.com/hiring/design/45-completely-free-photo-resources/&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/01/pictures/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/01/pictures/</guid>
        
        
        <category>important</category>
        
      </item>
    
      <item>
        <title>Spring Introduction</title>
        <description>&lt;h2 id=&quot;spring-introduction&quot;&gt;Spring Introduction&lt;/h2&gt;

&lt;p&gt;Spring developer name: Rod Jhonson &amp;amp; initial organization name is spring.org &amp;amp; now is pivotal. Springs initial name is interface 21.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Jan 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/01/31/spring-introduction/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/31/spring-introduction/</guid>
        
        
        <category>spring</category>
        
      </item>
    
  </channel>
</rss>
