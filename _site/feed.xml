<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rakib Hasan's Blog</title>
    <description>Rakib's Learning &amp; Blogs</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 28 May 2018 09:28:49 +0600</pubDate>
    <lastBuildDate>Mon, 28 May 2018 09:28:49 +0600</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Important command for windows</title>
        <description>&lt;h2 id=&quot;important-command-for-windows&quot;&gt;Important command for windows&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Java Patha variable&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for %i in (java.exe) do @echo.   %~$PATH:i
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Tomcat run as service&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service.bat install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 22 May 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/05/22/important-command-for-windows/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/22/important-command-for-windows/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Deploy Java War in Linux Server</title>
        <description>&lt;h2 id=&quot;deploy-java-war-in-linux-server&quot;&gt;Deploy Java War in Linux Server&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;First, update the package index.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update
or
sudo yum update
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Oracle JDK 8
This is the latest stable version of Java at time of writing, and the recommended version to install. You can do so using the following command:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install oracle-java8-installer
or
sudo yum install oracle-java8-installer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /usr
sudo -s (for root access)
mkdir rakib
chmod -R 777 rakib/

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Uninstall java
sudo yum remove jdk
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Run the following command to find out process associated with yum command:
# ps aux | grep -i yum
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 22 May 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/05/22/deploy-war-in-linux/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/22/deploy-war-in-linux/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Node in Windows operating System</title>
        <description>&lt;h2 id=&quot;install-node-in-windows&quot;&gt;Install node in windows&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Download the Windows installer from the &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Nodes.js® web site&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Run the installer (the .msi file you downloaded in the previous step.)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Follow the prompts in the installer (Accept the license agreement, click the NEXT button a bunch of times and accept the default installation settings).&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;../../../../static/img/installer.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Restart your computer. You won’t be able to run Node.js® until you restart your computer.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;test-it&quot;&gt;Test it!&lt;/h2&gt;

&lt;p&gt;Make sure you have Node and NPM installed by running simple commands to see what version of each is installed and to run a simple test program:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Test Node. To see if Node is installed, open the Windows Command Prompt, Powershell or a similar command line tool, and type node -v. This should print a version number, so you’ll see something like this v0.10.35.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Test NPM. To see if NPM is installed, type npm -v in Terminal. This should print NPM’s version number so you’ll see something like this 1.4.28&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a test file and run it. A simple way to test that node.js works is to create a JavaScript file: name it hello.js, and just add the code console.log(‘Node is installed!’);. To run the code simply open your command line program, navigate to the folder where you save the file and type node hello.js. This will start Node and run the code in the hello.js file. You should see the output Node is installed!.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;../../../../static/img/verify.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-update-node-and-npm&quot;&gt;How to Update Node and NPM&lt;/h2&gt;

&lt;p&gt;This is the new best way to upgrade npm on Windows.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run PowerShell as Administrator&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force
npm install -g npm-windows-upgrade
npm-windows-upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: Do not run npm i -g npm. Instead use npm-windows-upgrade to update npm going forward. Also if you run the NodeJS installer, it will replace the node version.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrades npm in-place, where node installed it.&lt;/li&gt;
  &lt;li&gt;Easy updating, update to the latest by running npm-windows-upgrade -p -v latest.&lt;/li&gt;
  &lt;li&gt;Does not modify the default path.&lt;/li&gt;
  &lt;li&gt;Does not change the default global package location.&lt;/li&gt;
  &lt;li&gt;Allows easy upgrades and downgrades.&lt;/li&gt;
  &lt;li&gt;Officially recommended by the NPM team.&lt;/li&gt;
  &lt;li&gt;A list of versions matched between NPM and NODE (https://nodejs.org/en/download/releases/) - but you will need to download NODE INSTALLER and run that to update node (https://nodejs.org/en/)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 18 Apr 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/04/18/node-in-windwos/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/18/node-in-windwos/</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>install angular cli</title>
        <description>&lt;h2 id=&quot;install-angular-cli&quot;&gt;install angular cli&lt;/h2&gt;

&lt;h4 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Node&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###Command in cmd (Windows)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g @angular/cli
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;update-ng-in-existing-project&quot;&gt;update ng in existing project&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save-dev @angular/cli@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 18 Apr 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/04/18/install-angular-cli-windwos/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/18/install-angular-cli-windwos/</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>Interview Question</title>
        <description>&lt;h2 id=&quot;database&quot;&gt;Database&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;get column difference of two table by a single sql?&lt;/li&gt;
  &lt;li&gt;get total table number of a database by a single sql?&lt;/li&gt;
  &lt;li&gt;Different between group by &amp;amp; where? is it write at same query? group by having implement? why needed ths?&lt;/li&gt;
  &lt;li&gt;Store Procedure: insert, update, rollback is on same store procedure. is it possible?&lt;/li&gt;
  &lt;li&gt;JOIN types &amp;amp; implementation?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;angular&quot;&gt;Angular&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;difference between Angular vs Angular Js, Angular 1 vs angular 2, angular 2 vs angular 4&lt;/li&gt;
  &lt;li&gt;what is Component in angular 4?&lt;/li&gt;
  &lt;li&gt;rootscope in angular 1?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;java-collection-framework&quot;&gt;Java Collection Framework&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;How work HashMap?&lt;/li&gt;
  &lt;li&gt;Vector vs enum?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;oop&quot;&gt;OOP&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;interface vs abstract class&lt;/li&gt;
  &lt;li&gt;must override in which case?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;spring&quot;&gt;Spring&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;what is Response params &amp;amp; its work?&lt;/li&gt;
  &lt;li&gt;is Vector thread safe?&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 11 Apr 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/04/11/interview-question/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/11/interview-question/</guid>
        
        
        <category>interview</category>
        
      </item>
    
      <item>
        <title>Design Pattern</title>
        <description>&lt;h2 id=&quot;design-pattern&quot;&gt;Design Pattern&lt;/h2&gt;
&lt;p&gt;A design pattern is a well described solution to a common software problem.&lt;/p&gt;

&lt;h5 id=&quot;advantage-of-design-pattern&quot;&gt;Advantage of design pattern:&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;They are reusable in multiple projects.&lt;/li&gt;
  &lt;li&gt;They provide the solutions that help to define the system architecture.&lt;/li&gt;
  &lt;li&gt;They capture the software engineering experiences.&lt;/li&gt;
  &lt;li&gt;They provide transparency to the design of an application.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;when-should-we-use-the-design-patterns&quot;&gt;When should we use the design patterns?&lt;/h5&gt;
&lt;p&gt;We must use the design patterns during the analysis and requirement phase of SDLC(Software Development Life Cycle).&lt;/p&gt;

&lt;p&gt;Creational Design Patterns&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Singleton Pattern&lt;/li&gt;
  &lt;li&gt;Factory Pattern&lt;/li&gt;
  &lt;li&gt;Abstract Factory Pattern&lt;/li&gt;
  &lt;li&gt;Builder Pattern
5.Prototype Pattern&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Structural Design Patterns&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Adapter Pattern&lt;/li&gt;
  &lt;li&gt;Composite Pattern&lt;/li&gt;
  &lt;li&gt;Proxy Pattern&lt;/li&gt;
  &lt;li&gt;Flyweight Pattern&lt;/li&gt;
  &lt;li&gt;Facade Pattern&lt;/li&gt;
  &lt;li&gt;Bridge Pattern&lt;/li&gt;
  &lt;li&gt;Decorator Pattern&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Behavioral Design Patterns&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Template Method Pattern&lt;/li&gt;
  &lt;li&gt;Mediator Pattern&lt;/li&gt;
  &lt;li&gt;Chain of Responsibility Pattern&lt;/li&gt;
  &lt;li&gt;Observer Pattern&lt;/li&gt;
  &lt;li&gt;Strategy Pattern&lt;/li&gt;
  &lt;li&gt;Command Pattern&lt;/li&gt;
  &lt;li&gt;State Pattern&lt;/li&gt;
  &lt;li&gt;Visitor Pattern&lt;/li&gt;
  &lt;li&gt;Interpreter Pattern&lt;/li&gt;
  &lt;li&gt;Iterator Pattern&lt;/li&gt;
  &lt;li&gt;Memento Pattern&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.javatpoint.com/design-patterns-in-java&quot;&gt;Java Point&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Mar 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/03/09/design-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/09/design-pattern/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>SDKMAN</title>
        <description>&lt;h2 id=&quot;sdkman&quot;&gt;SDKMAN&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;GIT&lt;/li&gt;
  &lt;li&gt;JAVA&lt;/li&gt;
  &lt;li&gt;http://sdkman.io/&lt;/li&gt;
  &lt;li&gt;Multi-platform-&amp;gt; Powershell CLI version&lt;/li&gt;
  &lt;li&gt;Open powershell from windows pc then type
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [Environment]::GetEnvironmentVariable(&quot;PSModulePath&quot;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Then get the following&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  C:\Users\rakib\OneDrive\Documents\WindowsPowerShell\Modules;C:\Program Files\WindowsPowerShell\Modules;C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Then Type&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; New-Item C:\Users\rakib\OneDrive\Documents\WindowsPowerShell\Modules -ItemType Directory
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then Type&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   cd C:\Users\rakib\OneDrive\Documents\WindowsPowerShell\Modules
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then clone by&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   git clone https://github.com/flofreud/posh-gvm.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then Type&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;New-Item -path $profile -type file -force
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Close power shell &amp;amp; open in administrator mode &amp;amp; Then Type&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Install-Module posh-gvm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then type&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set-ExecutionPolicy RemoteSigned
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/14/sdkman/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/14/sdkman/</guid>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>DRY</title>
        <description>&lt;h2 id=&quot;dry-dont-repeat-yourself&quot;&gt;DRY (Don’t Repeat Yourself)&lt;/h2&gt;

&lt;h5 id=&quot;in-wikipedia&quot;&gt;In Wikipedia&lt;/h5&gt;
&lt;p&gt;DRY- A Principle of software development, aimed at reducing repetition of information of all kinds.&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/14/dry/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/14/dry/</guid>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>Java-Stream</title>
        <description>&lt;h2 id=&quot;stream&quot;&gt;Stream&lt;/h2&gt;

&lt;h5 id=&quot;in-wikipedia&quot;&gt;In Wikipedia&lt;/h5&gt;
&lt;p&gt;DRY- A Principle of software development, aimed at reducing repetition of information of all kinds.&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/14/stream/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/14/stream/</guid>
        
        
        <category>java89</category>
        
      </item>
    
      <item>
        <title>Singleton Pattern</title>
        <description>&lt;h2 id=&quot;singleton-pattern&quot;&gt;Singleton Pattern&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Singleton pattern restricts the instantiation of a class and ensures that only one instance of the class exists in the java virtual machine.&lt;/li&gt;
  &lt;li&gt;The singleton class must provide a global access point to get the instance of the class.&lt;/li&gt;
  &lt;li&gt;Singleton pattern is used for logging, drivers objects, caching and thread pool.&lt;/li&gt;
  &lt;li&gt;Singleton design pattern is also used in other design patterns like Abstract Factory, Builder, Prototype, Facade etc.&lt;/li&gt;
  &lt;li&gt;Singleton design pattern is used in core java classes also, for example java.lang.Runtime, java.awt.Desktop.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;java-singleton-pattern-implementation&quot;&gt;Java Singleton Pattern Implementation&lt;/h4&gt;
&lt;p&gt;To implement Singleton pattern, we have different approaches but all of them have following common concepts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Private constructor to restrict instantiation of the class from other classes.&lt;/li&gt;
  &lt;li&gt;Private static variable of the same class that is the only instance of the class.&lt;/li&gt;
  &lt;li&gt;Public static method that returns the instance of the class, this is the global access point for outer world to get the instance of the singleton class.
    &lt;h5 id=&quot;different-approaches-of-singleton-pattern-implementation&quot;&gt;Different approaches of Singleton pattern implementation&lt;/h5&gt;
    &lt;ol&gt;
      &lt;li&gt;Eager initialization&lt;/li&gt;
      &lt;li&gt;Static block initialization&lt;/li&gt;
      &lt;li&gt;Lazy Initialization&lt;/li&gt;
      &lt;li&gt;Thread Safe Singleton&lt;/li&gt;
      &lt;li&gt;Bill Pugh Singleton Implementation&lt;/li&gt;
      &lt;li&gt;Using Reflection to destroy Singleton Pattern&lt;/li&gt;
      &lt;li&gt;Enum Singleton&lt;/li&gt;
      &lt;li&gt;Serialization and Singleton&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;eager-initialization&quot;&gt;Eager initialization&lt;/h4&gt;
&lt;p&gt;In eager initialization, the instance of Singleton Class is created at the time of class loading, this is the easiest method to create a singleton class but it has a drawback that instance is created even though client application might not be using it.
Here is the implementation of static initialization singleton class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class EagerInitializedSingleton {
    
    private static final EagerInitializedSingleton instance = new EagerInitializedSingleton();
    
    //private constructor to avoid client applications to use constructor
    private EagerInitializedSingleton(){}

    public static EagerInitializedSingleton getInstance(){
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If your singleton class is not using a lot of resources, this is the approach to use. But in most of the scenarios, Singleton classes are created for resources such as File System, Database connections etc and we should avoid the instantiation until unless client calls the getInstance method. Also, this method doesn’t provide any options for exception handling.&lt;/p&gt;
&lt;h4 id=&quot;static-block-initialization&quot;&gt;Static block initialization&lt;/h4&gt;
&lt;p&gt;Static block initialization implementation is similar to eager initialization, except that instance of class is created in the static block that provides option for exception handling.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class StaticBlockSingleton {

    private static StaticBlockSingleton instance;
    
    private StaticBlockSingleton(){}
    
    //static block initialization for exception handling
    static{
        try{
            instance = new StaticBlockSingleton();
        }catch(Exception e){
            throw new RuntimeException(&quot;Exception occured in creating singleton instance&quot;);
        }
    }
    
    public static StaticBlockSingleton getInstance(){
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Both eager initialization and static block initialization creates the instance even before it’s being used and that is not the best practice to use. So in further sections, we will learn how to create Singleton class that supports lazy initialization.&lt;/p&gt;

&lt;h4 id=&quot;lazy-initialization&quot;&gt;Lazy Initialization&lt;/h4&gt;
&lt;p&gt;Lazy initialization method to implement Singleton pattern creates the instance in the global access method. Here is the sample code for creating Singleton class with this approach.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class LazyInitializedSingleton {

    private static LazyInitializedSingleton instance;
    
    private LazyInitializedSingleton(){}
    
    public static LazyInitializedSingleton getInstance(){
        if(instance == null){
            instance = new LazyInitializedSingleton();
        }
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above implementation works fine incase of single threaded environment but when it comes to multithreaded systems, it can cause issues if multiple threads are inside the if loop at the same time. It will destroy the singleton pattern and both threads will get the different instances of singleton class. In next section, we will see different ways to create a thread-safe singleton class.&lt;/p&gt;
&lt;h4 id=&quot;thread-safe-singleton&quot;&gt;Thread Safe Singleton&lt;/h4&gt;
&lt;p&gt;The easier way to create a thread-safe singleton class is to make the global access method synchronized, so that only one thread can execute this method at a time. General implementation of this approach is like the below class.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class ThreadSafeSingleton {

    private static ThreadSafeSingleton instance;
    
    private ThreadSafeSingleton(){}
    
    public static synchronized ThreadSafeSingleton getInstance(){
        if(instance == null){
            instance = new ThreadSafeSingleton();
        }
        return instance;
    }
    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Above implementation works fine and provides thread-safety but it reduces the performance because of cost associated with the synchronized method, although we need it only for the first few threads who might create the separate instances (Read: Java Synchronization). To avoid this extra overhead every time, double checked locking principle is used. In this approach, the synchronized block is used inside the if condition with an additional check to ensure that only one instance of singleton class is created.
Below code snippet provides the double checked locking implementation.
public static ThreadSafeSingleton getInstanceUsingDoubleLocking(){
    if(instance == null){
        synchronized (ThreadSafeSingleton.class) {
            if(instance == null){
                instance = new ThreadSafeSingleton();
            }
        }
    }
    return instance;
}&lt;/p&gt;

&lt;h4 id=&quot;bill-pugh-singleton-implementation&quot;&gt;Bill Pugh Singleton Implementation&lt;/h4&gt;
&lt;p&gt;Prior to Java 5, java memory model had a lot of issues and above approaches used to fail in certain scenarios where too many threads try to get the instance of the Singleton class simultaneously. So Bill Pugh came up with a different approach to create the Singleton class using a inner static helper class. The Bill Pugh Singleton implementation goes like this;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class BillPughSingleton {

    private BillPughSingleton(){}
    
    private static class SingletonHelper{
        private static final BillPughSingleton INSTANCE = new BillPughSingleton();
    }
    
    public static BillPughSingleton getInstance(){
        return SingletonHelper.INSTANCE;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice the private inner static class that contains the instance of the singleton class. When the singleton class is loaded, SingletonHelper class is not loaded into memory and only when someone calls the getInstance method, this class gets loaded and creates the Singleton class instance.
This is the most widely used approach for Singleton class as it doesn’t require synchronization. I am using this approach in many of my projects and it’s easy to understand and implement also.&lt;/p&gt;

&lt;h4 id=&quot;advantage-of-singleton-design-pattern&quot;&gt;Advantage of Singleton design pattern&lt;/h4&gt;
&lt;p&gt;Saves memory because object is not created at each request. Only single instance is reused again and again.&lt;/p&gt;
&lt;h4 id=&quot;usage-of-singleton-design-pattern&quot;&gt;Usage of Singleton design pattern&lt;/h4&gt;
&lt;p&gt;Singleton pattern is mostly used in multi-threaded and database applications. It is used in logging, caching, thread pools, configuration settings etc.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-examples?utm_source=website&amp;amp;utm_medium=sidebar&amp;amp;utm_campaign=DesignPattern-Sidebar-Widget&quot;&gt;&lt;strong&gt;JournalDev&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/01/singleton-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/01/singleton-pattern/</guid>
        
        
        <category>Java</category>
        
      </item>
    
  </channel>
</rss>
