<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rakib Hasan's Blog</title>
    <description>Rakib's Learning &amp; Blogs</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 01 Feb 2018 01:20:51 +0600</pubDate>
    <lastBuildDate>Thu, 01 Feb 2018 01:20:51 +0600</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Spring Introduction</title>
        <description>&lt;h2 id=&quot;spring-introduction&quot;&gt;Spring Introduction&lt;/h2&gt;

&lt;p&gt;Spring developer name: Rod Jhonson &amp;amp; initial organization name is spring.org &amp;amp; now is pivotal. Springs initial name is interface 21.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Jan 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/01/31/spring-introduction/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/31/spring-introduction/</guid>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>AngularJS - $pristine, $dirty, $valid, $invalid</title>
        <description>&lt;p&gt;Today we will go through the AngularJS Forms validations. Forms are important part of any application. They help us to collect information from user so that it can be processed for corresponding activity. We need to validate form so that only the valid values are put in the form. For that we use JavaScript or any other JavaScript library like jQuery.&lt;/p&gt;

&lt;p&gt;Angular also provides some help in this context. We can validate a form and see that the required validations work correctly. It provides different objects to the form. They are very helpful while validating forms:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$pristine: It will be TRUE, if the user has not interacted with the form yet
$dirty: It will be TRUE, if the user has already interacted with the form.
$valid: It will be TRUE, if all containing form and controls are valid
$invalid: It will be TRUE, if at least one containing form and control is invalid.
$error: Is an object hash, containing references to all invalid controls or forms, where: 
    keys are validation tokens (error names)
    values are arrays of controls or forms that are invalid with given error.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are some built in validation tokens, that can help in validating form:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;email
max
maxlength
min
minlength
number
pattern
required
url
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In accordance with these AngularJS also provides corresponding CSS classes for them. We can use them for validation purpose.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng-pristine
ng-dirty
ng-valid
ng-invalid
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lets see how we can use them. Usage:
In Form: myForm.$dirty
For Field: myForm.firldName.$dirty
In CSS:
.ng-dirty{
 background-color: yellow;
}&lt;/p&gt;

&lt;p&gt;This is little bit information about the AngularJS form validation.
Use #ngvinod to discuss on Twitter about this.&lt;/p&gt;

&lt;p&gt;http://www.ng-vinod.com/2014/07/angularjs-pristine-dirty-valid-invalid.html&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Dec 2017 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2017/12/26/AngularJS-$pristine-$dirty-$valid-$invalid/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/26/AngularJS-$pristine-$dirty-$valid-$invalid/</guid>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>Amazon S3 Direct File Upload From Client Browser Private Key Disclosure</title>
        <description>&lt;h2 id=&quot;amazon-s3-direct-file-upload-from-client-browser---private-key-disclosure&quot;&gt;Amazon S3 direct file upload from client browser - private key disclosure&lt;/h2&gt;
&lt;p&gt;Create an Amazon S3 bucket and configure CORS
CORS needs to be configured on the Amazon S3 bucket to be accessed directly from JavaScript in the browser.
Navigate to the Amazon S3 console.
Choose an existing bucket or create a new bucket if desired. Note the bucket name and bucket region for later use in the application.&lt;/p&gt;

&lt;p&gt;Click the Properties tab, open the Permissions section, and click Edit CORS Configuration.&lt;/p&gt;

&lt;p&gt;Copy the below XML into the text box and click Save.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSConfiguration&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://s3.amazonaws.com/doc/2006-03-01&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSRule&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedOrigin&amp;gt;&lt;/span&gt;*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedOrigin&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;GET&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;PUT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;POST&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;DELETE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedHeader&amp;gt;&lt;/span&gt;*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedHeader&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSRule&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSConfiguration&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can upload files on AWS S3 using a server side solution, but in case of larger files it is advisable to use a client side solution. You can probably use JavaScript file upload feature of AWS S3. This is simple three step feature as described below:&lt;/p&gt;

&lt;p&gt;Step 1 : In the head section of your page include javascript sdk and specify your keys like this:&lt;/p&gt;

&lt;script src=&quot;https://sdk.amazonaws.com/js/aws-sdk-2.1.24.min.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    AWS.config.update({
        accessKeyId : 'ACCESS_KEY',
        secretAccessKey : 'SECRET_KEY'
    });
    AWS.config.region = 'AWS_REGION';
&lt;/script&gt;

&lt;p&gt;Step 2 : Now create a simple html form with a file input.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;form id=&quot;fileUploadForm&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&amp;gt;
&amp;lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; value=&quot;dataFile&quot; required=&quot;&quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Step 3 : Now upload your input file to S3&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&quot;#fileUploadForm&quot;).submit(function() {
var bucket = new AWS.S3({params: {Bucket: 'BUCKET_NAME'}});
var fileChooser = document.getElementById('file');
var file = fileChooser.files[0];
if (file) {
var params = {Key: 'FILE_NAME', ContentType: file.type, Body: file};
bucket.upload(params).on('httpUploadProgress', function(evt) {
console.log(&quot;Uploaded :: &quot; + parseInt((evt.loaded * 100) / evt.total)+'%');
}).send(function(err, data) {
alert(&quot;File uploaded successfully.&quot;);
});
}
return false;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To upload the file successfully, you need to enable CORS configuration on S3.&lt;/p&gt;

&lt;p&gt;Generally, it is not advisable to display your keys directly on page, so you can use Amazon Cognito or web identity federation feature.&lt;/p&gt;

&lt;p&gt;Using Cognito service&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;AWS S3 File Upload&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://sdk.amazonaws.com/js/aws-sdk-2.1.12.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file-chooser&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;upload-button&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Upload to S3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;results&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ap-south-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1. Enter your region&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CognitoIdentityCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;IdentityPoolId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ap-south-1:79a1d229-dd96-4c05-a7de-ef9d58976122'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2. Enter your identity pool&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucketName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test-marcom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Enter your bucket name&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucketName&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileChooser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'file-chooser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'upload-button'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'results'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileChooser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;objKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'testing/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;objKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;ContentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;ACL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'public-read'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;putObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ERROR: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;listObjs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Nothing to upload.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listObjs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'testing'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prefix&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ERROR: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;objKeys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;objKeys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;objKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 01 Jun 2017 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2017/06/01/amazon-s3-direct-file-upload-from-client-browser-private-key-disclosure/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/01/amazon-s3-direct-file-upload-from-client-browser-private-key-disclosure/</guid>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Some Types Of Request Response Params In Spring</title>
        <description>&lt;h2 id=&quot;requestresponse-paramters-in-spring-method&quot;&gt;Request/Response paramters in spring method&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;HttpSession&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@PathVariable&lt;/strong&gt; annotated parameters for access to URI template variables.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@RequestMapping(value=&quot;/owners/{ownerId}&quot;, method=RequestMethod.GET)
public String findOwner(@PathVariable String ownerId, Model model) {
Owner owner = ownerService.findOwner(ownerId);  
model.addAttribute(&quot;owner&quot;, owner);  
return &quot;displayOwner&quot;; 
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@RequestHeader&lt;/strong&gt; annotated parameters for access to specific Servlet request HTTP headers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@RequestBody&lt;/strong&gt; annotated parameters for access to the HTTP request body.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@RequestMapping(value = &quot;/something&quot;, method = RequestMethod.PUT)
public void handle(@RequestBody String body, Writer writer) throws IOException {
writer.write(body);
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@RequestPart&lt;/strong&gt; annotated parameters for access to the content of a “multipart/form-data” request part.
```
@RequestMapping(value=”/someUrl”, method = RequestMethod.POST)
public String onSubmit(@RequestPart(“meta-data”) MetaData metadata,
                     @RequestPart(“file-data”) MultipartFile file) {
  // …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
* **HttpEntity&amp;lt;?&amp;gt;** parameters for access to the Servlet request HTTP headers and contents.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;@RequestMapping(“/something”)
public ResponseEntity&lt;String&gt; handle(HttpEntity&amp;lt;byte[]&amp;gt; requestEntity) throws UnsupportedEncodingException {
  String requestHeader = requestEntity.getHeaders().getFirst(&quot;MyRequestHeader&quot;));
  byte[] requestBody = requestEntity.getBody();
  // do something with request header and body&lt;/String&gt;&lt;/p&gt;

&lt;p&gt;HttpHeaders responseHeaders = new HttpHeaders();
  responseHeaders.set(“MyResponseHeader”, “MyValue”);
  return new ResponseEntity&lt;String&gt;(&quot;Hello World&quot;, responseHeaders, HttpStatus.CREATED);
}
```&lt;/String&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Apr 2017 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2017/04/28/some-types-of-request-response-params-in-spring/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/28/some-types-of-request-response-params-in-spring/</guid>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>Spring Boot Application Live Reload Hot Swap With Intellij Idea</title>
        <description>&lt;h2 id=&quot;spring-boot-application-live-reload-hot-swap-with-intellij-idea&quot;&gt;Spring Boot Application Live Reload (Hot Swap) With Intellij IDEA&lt;/h2&gt;
&lt;p&gt;While developing Spring Boot Applications using Intellij IDEA, it was so annoying to restart the Spring Boot app after each and every change. Spring Boot provides live reload (hot swap) of application out of the box using the following dependency.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-devtools&amp;lt;/artifactId&amp;gt;
    &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But it didn’t live reload the application/container, and the hot deployment didn’t work for changes. Further researching found that following changes needed to be done in order the hot deployment to be worked correctly.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open the Settings –&amp;gt; Build-Execution-Deployment –&amp;gt; Compiler&lt;/p&gt;

    &lt;p&gt;and enable the Make Project Automatically.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then press ctrl+shift+A and search for the registry. In the registry, make the following configuration enabled.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compiler.automake.allow.when.app.running
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Reload Static content (html, css, js)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Add this configuration to your Spring Boot Maven Plugin:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;configuration&amp;gt;
    &amp;lt;addResources&amp;gt;true&amp;lt;/addResources&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Restart the IDE.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it! Now the hot deployment works, and you don’t have to restart manually after each and every change.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Apr 2017 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2017/04/28/Spring-Boot-Application-Live-Reload-Hot-Swap-With-Intellij-IDEA/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/28/Spring-Boot-Application-Live-Reload-Hot-Swap-With-Intellij-IDEA/</guid>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>Sementic Ui Calender Set Date Backend Frontend</title>
        <description>&lt;h2 id=&quot;sementic-ui-calender&quot;&gt;Sementic UI Calender&lt;/h2&gt;
&lt;p&gt;Calendar module for Semantic UI. See &lt;a href=&quot;https://jsbin.com/ruqakehefa/&quot;&gt;https://jsbin.com/ruqakehefa/&lt;/a&gt; for example usage.
&lt;a href=&quot;https://github.com/mdehoog/Semantic-UI-Calendar&quot;&gt;Github Link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Install using bower:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bower install --save semantic-ui-calendar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Install using npm:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save semantic-ui-calendar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Include javascript and css in html:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &amp;lt;script type=&quot;text/javascript&quot; src=&quot;/bower_components/semantic-ui-calendar/dist/calendar.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
   &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/bower_components/semantic-ui-calendar/dist/calendar.min.css&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;basic-html&quot;&gt;Basic HTML&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;ui calendar&quot; id=&quot;date&quot;&amp;gt;
    &amp;lt;div class=&quot;ui input left icon&quot;&amp;gt;
        &amp;lt;i class=&quot;calendar icon&quot;&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;input name=&quot;date&quot; type=&quot;text&quot;&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;javascript-calling&quot;&gt;Javascript Calling&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&quot;#date&quot;).calendar({
    type: 'date',
    parser: app.dateParser,
    parseFormat: 'dd/MM/yyyy',
    formatter: app.dateFormatter,
    minDate: $(&quot;#date&quot;).data('min-date') ? kendo.parseDate($(&quot;#date&quot;).data('min-date'), 'dd/MM/yyyy') : null,
    maxDate: $(&quot;#date&quot;).data('max-date') ? kendo.parseDate($(&quot;#date&quot;).data('max-date'), 'dd/MM/yyyy') : null,
});
var app = {
    dateParser: {
        date: function (txtDate, settings) {
            if (!txtDate) return null;
            if (settings.parseFormat) {
                return kendo.parseDate(txtDate, settings.parseFormat);
            } else {
                return kendo.parseDate(txtDate, &quot;dd/MM/yyyy&quot;);
            }
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;trigger-angular-value-on-change-calender&quot;&gt;Trigger angular value on change Calender&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;ui calendar&quot; id=&quot;date&quot;&amp;gt;
    &amp;lt;div class=&quot;ui input left icon&quot;&amp;gt;
        &amp;lt;i class=&quot;calendar icon&quot;&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;input name=&quot;date&quot; type=&quot;text&quot; ng-model=&quot;angularController.element&quot;&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

$(&quot;#date&quot;).calendar({
    type: 'date',
    parser: app.dateParser,
    parseFormat: 'dd/MM/yyyy',
    formatter: app.dateFormatter,
    minDate: $(&quot;#date&quot;).data('min-date') ? kendo.parseDate($(&quot;#date&quot;).data('min-date'), 'dd/MM/yyyy') : null,
    maxDate: $(&quot;#dateOfCheque&quot;).data('max-date') ? kendo.parseDate($(&quot;#date&quot;).data('max-date'), 'dd/MM/yyyy') : null,
    onChange: function (date, text, mode) {
    var $scope = angular.element($(&quot;#date&quot;)).scope();
    $scope.$apply(function() {
        $scope.angularController.element = text;
    });
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;changed-value-from-javascript&quot;&gt;Changed value from Javascript&lt;/h3&gt;
&lt;p&gt;calendar(‘set date’, Javascript native Date object)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $('#date').calendar('set date', new Date());
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;initialized-backend-date-to-calender&quot;&gt;Initialized Backend Date to Calender&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;ui calendar&quot; id=&quot;date&quot;&amp;gt;
    &amp;lt;div class=&quot;ui input left icon&quot;&amp;gt;
        &amp;lt;i class=&quot;calendar icon&quot;&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;input name=&quot;date&quot; type=&quot;text&quot; value=&quot;${g.formatDate(date: new Date(), format: 'dd/MM/yyyy')}&quot;&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 28 Apr 2017 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2017/04/28/sementic-ui-calender-set-date-backend-frontend/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/28/sementic-ui-calender-set-date-backend-frontend/</guid>
        
        
        <category>sementic-ui</category>
        
      </item>
    
      <item>
        <title>Learning Markdown For Your Site</title>
        <description>&lt;p&gt;Markdown is a lightweight and easy-to-use syntax for styling all forms of writing on the GitHub platform.&lt;/p&gt;

&lt;h3 id=&quot;what-you-will-learn&quot;&gt;What you will learn:&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;How the Markdown format makes styled collaborative editing easy&lt;/li&gt;
  &lt;li&gt;How Markdown differs from traditional formatting approaches&lt;/li&gt;
  &lt;li&gt;How to use Markdown to format text&lt;/li&gt;
  &lt;li&gt;How to leverage GitHub’s automatic Markdown rendering&lt;/li&gt;
  &lt;li&gt;How to apply GitHub’s unique Markdown extensions&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-is-markdown&quot;&gt;What is Markdown?&lt;/h3&gt;

&lt;p&gt;Markdown is a way to style text on the web. You control the display of the document; formatting words as bold or italic, adding images, and creating lists are just a few of the things we can do with Markdown. Mostly, Markdown is just regular text with a few non-alphabetic characters thrown in, like # or *.&lt;/p&gt;

&lt;p&gt;You can use Markdown most places around GitHub:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gists&lt;/li&gt;
  &lt;li&gt;Comments in Issues and Pull Requests&lt;/li&gt;
  &lt;li&gt;Files with the .md or .markdown extension&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information, see “Writing on GitHub” in the GitHub Help.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;… to Get&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*Italic*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;Italic&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;**Bold**&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Bold&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[Link](http://a.com)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://a.com&quot;&gt;Link&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;![Image](http://url/a.png)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;http://url/a.png&quot; alt=&quot;Image&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; Blockquote&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&amp;gt; Blockquote&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;* List&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;* List&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Horizontal Rule&lt;/td&gt;
      &lt;td&gt;Horizontal Rule&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;—&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Headers&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# H1
## H2
### H3
#### H4
##### H5
###### H6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h1 id=&quot;h1&quot;&gt;H1&lt;/h1&gt;
&lt;h2 id=&quot;h2&quot;&gt;H2&lt;/h2&gt;
&lt;h3 id=&quot;h3&quot;&gt;H3&lt;/h3&gt;
&lt;h4 id=&quot;h4&quot;&gt;H4&lt;/h4&gt;
&lt;h5 id=&quot;h5&quot;&gt;H5&lt;/h5&gt;
&lt;h6 id=&quot;h6&quot;&gt;H6&lt;/h6&gt;

&lt;h4 id=&quot;images&quot;&gt;Images&lt;/h4&gt;

&lt;p&gt;Here’s our logo (hover to see the title text):&lt;/p&gt;

&lt;p&gt;Inline-style:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 1&quot;)

Reference-style: 
![alt text][logo]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reference-link&quot;&gt;Reference Link&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#emphasis&quot;&gt;Markdown Cheatsheet&lt;/a&gt;, 
&lt;a href=&quot;https://help.ghost.org/hc/en-us/articles/224410728-Markdown-Guide&quot;&gt;Markdown Guide&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2017/01/01/learning-markdown-for-your-site/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/01/learning-markdown-for-your-site/</guid>
        
        
        <category>Markdown</category>
        
      </item>
    
      <item>
        <title>Starting Project With Machine Learning</title>
        <description>&lt;h2 id=&quot;machine-learing&quot;&gt;Machine Learing&lt;/h2&gt;
&lt;p&gt;Machine learning is a type of artificial intelligence (AI) that provides computers with the ability to learn without being explicitly programmed. Machine learning focuses on the development of computer programs that can change when exposed to new data.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A computer program is said to learn from experience E with respect to some task T and some performance measure P,
 if its performance on T, as measured by P, improves with experience E.” 
 -- Tom Mitchell, Carnegie Mellon University 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So if you want your program to predict, for example, traffic patterns at a busy intersection (task T), you can run it through a machine learning algorithm with data about past traffic patterns (experience E) and, if it has successfully “learned”, it will then do better at predicting future traffic patterns (performance measure P).&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ML solves problems that cannot be solved by numerical means alone. 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To break down the definition for easier understanding I should mention some factors that we should know as follows:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Method means technique or way to do&lt;/li&gt;
  &lt;li&gt;Data means set of information&lt;/li&gt;
  &lt;li&gt;Existing data means data already we have for any task.&lt;/li&gt;
  &lt;li&gt;Algorithm - Step by step set of operations/command to be performed&lt;/li&gt;
  &lt;li&gt;Automatically – Something is done or gained without working again.&lt;/li&gt;
  &lt;li&gt;Model - Data schema that learn from data iteratively&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 28 Dec 2016 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2016/12/28/starting-project-with-machine-learning/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/28/starting-project-with-machine-learning/</guid>
        
        
        <category>Machine-Learning</category>
        
      </item>
    
      <item>
        <title>Software Development Life Cycle</title>
        <description>&lt;h2 id=&quot;software-development-life-cycle&quot;&gt;Software Development Life Cycle&lt;/h2&gt;

&lt;p&gt;Software Development Life Cycle (SDLC) is a process used by the software industry to design, develop and test high quality softwares. The SDLC aims to produce a high-quality software that meets or exceeds customer expectations, reaches completion within times and cost estimates.&lt;/p&gt;

&lt;h3 id=&quot;what-is-sdlc&quot;&gt;What is SDLC?&lt;/h3&gt;

&lt;p&gt;SDLC is a process followed for a software project, within a software organization. It consists of a detailed plan describing how to develop, maintain, replace and alter or enhance specific software. The life cycle defines a methodology for improving the quality of software and the overall development process.&lt;/p&gt;

&lt;p&gt;The following figure is a graphical representation of the various stages of a typical SDLC.&lt;/p&gt;

&lt;p&gt;SDLC Models&lt;/p&gt;

&lt;p&gt;There are various software development life cycle models defined and designed which are followed during the software development process. These models are also referred as Software Development Process Models”. Each process model follows a Series of steps unique to its type to ensure success in the process of software development.&lt;/p&gt;

&lt;p&gt;Following are the most important and popular SDLC models followed in the industry &amp;amp;miuns;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Waterfall Model&lt;/li&gt;
  &lt;li&gt;Iterative Model&lt;/li&gt;
  &lt;li&gt;Spiral Model&lt;/li&gt;
  &lt;li&gt;V-Model&lt;/li&gt;
  &lt;li&gt;Big Bang Model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other related methodologies are Agile Model, RAD Model, Rapid Application Development and Prototyping Models.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Dec 2016 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2016/12/26/software-development-life-cycle/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/26/software-development-life-cycle/</guid>
        
        
        <category>SDLC</category>
        
      </item>
    
      <item>
        <title>Software Development Life Cycle-Model</title>
        <description>&lt;h2 id=&quot;waterfall-model---design&quot;&gt;Waterfall Model - Design&lt;/h2&gt;

&lt;p&gt;Waterfall approach was first SDLC Model to be used widely in Software Engineering to ensure success of the project. In “The Waterfall” approach, the whole process of software development is divided into separate phases. In this Waterfall model, typically, the outcome of one phase acts as the input for the next phase sequentially.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../static/img/sdlc_waterfall_model.jpg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Dec 2016 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2016/12/26/sdlc-models/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/26/sdlc-models/</guid>
        
        
        <category>SDLC</category>
        
      </item>
    
  </channel>
</rss>
