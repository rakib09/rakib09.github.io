<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java Tutorial</title>
    <description>Rakib's Learning &amp; Blogs</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 05 Jul 2019 02:38:47 +0600</pubDate>
    <lastBuildDate>Fri, 05 Jul 2019 02:38:47 +0600</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Java SOLID Principal</title>
        <description>&lt;h1 id=&quot;solid-principles&quot;&gt;SOLID Principles:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Single Responsibility&lt;/li&gt;
  &lt;li&gt;Open for Extension/Closed for Modification&lt;/li&gt;
  &lt;li&gt;Liskov Substitution&lt;/li&gt;
  &lt;li&gt;Interface Segregation&lt;/li&gt;
  &lt;li&gt;Dependency Inversion&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;single-responsibility&quot;&gt;Single Responsibility&lt;/h3&gt;

&lt;p&gt;A class should do one and only one job.
Principle violation example (bad):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Principle violation example (bad):

public class TechnicalStaff {
    private int id;
    private String fname, lname, title;
    private Date dob, dateOfJoining;
    //Getters &amp;amp; setters
    ...
    void maintainSystems(){}
    void performAppraisal(){}
    void promoteEmployee(){}
}

Principle adherence example (good):

public abstract class Employee {
    private int id;
    private String fname, lname, title;
    private Date dob, dateOfJoining;
    //Getters &amp;amp; setters
    ...
}

public class TechnicalStaff extends Employee {
    void maintainSystems(){} 
}

public class Manager extends Employee {
    void performAppraisalOfDirectReport(TechnicalStaff employee){}
    void promoteDirectReport(TechnicalStaff employee){}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;open-for-extensionclosed-for-modification&quot;&gt;Open for Extension/Closed for Modification:&lt;/h3&gt;
&lt;p&gt;Software entities should be Open for extension, but closed for modification.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Principle violation example (bad):

public abstract class Employee {
    private int id;
    private String fname, lname, title;
    private Date dob, dateOfJoining;
    //Getters &amp;amp; setters
    ...
}

public class TechnicalStaff extends Employee {
    void maintainSystems(){}
}

public class Manager extends Employee {
    void performAppraisalOfDirectReport(TechnicalStaff employee){}
    void promoteDirectReport(TechnicalStaff employee){}
}

Now when your company expands and you start employing Non Technical Accounting Staff, you will need to alter existing Manager class as follows:

public abstract class Employee {
    private int id;
    private String fname, lname, title;
    private Date dob, dateOfJoining;
    //Getters &amp;amp; setters
    ...
}

public class TechnicalStaff extends Employee {
    void maintainSystems(){}
}

public class Accountant extends Employee {
    void maintainAccounts(){}
}

public class Manager extends Employee {
    void performAppraisalOfTechnicalStaff(TechnicalStaff employee){}
    void promoteTechnicalStaff(TechnicalStaff employee){}
    void performAppraisalOfAccountant(Accountant employee){}
    void promoteAccountant(Accountant employee){}
}

This is bad since you will need to keep adding new methods to Manager as and when new Employee types are recruited.

Principle adherence example (good):

public abstract class Employee {
    private int id;
    private String fname, lname, title;
    private Date dob, dateOfJoining;
    //Getters &amp;amp; setters
    ...
}
public class TechnicalStaff extends Employee {
    void maintainSystems(){}
}
public class Accountant extends Employee {
    void maintainAccounts(){}
}
public class Manager extends Employee {
    void performAppraisalOfDirectReport(Employee employee){}
    void promoteDirectReport(Employee employee){}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;liskov-substitution&quot;&gt;Liskov Substitution:&lt;/h3&gt;
&lt;p&gt;A child class must be able to completely substitute and act-in for it’s base(parent) class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bad example
public class Bird{
    public void fly(){}
}
public class Duck extends Bird{}
The duck can fly because of it is a bird, But what about this:

public class Ostrich extends Bird{}
Ostrich is a bird, But it can't fly, Ostrich class is a subtype of class Bird, But it can't use the fly method, that means that we are breaking LSP principle.

Good example
public class Bird{
}
public class FlyingBirds extends Bird{
    public void fly(){}
}
public class Duck extends FlyingBirds{}
public class Ostrich extends Bird{} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;interface-segregation&quot;&gt;Interface Segregation:&lt;/h3&gt;
&lt;p&gt;A client should never be forced to implement a function that it does not require.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Example (Bad)
public interface Toy {
    void setPrice(double price);
    void setColor(String color);
    void move();
    void fly();
}
public class ToyHouse implements Toy {
    double price;
    String color;
    @Override
    public void setPrice(double price) {
        this.price = price;
    }
    @Override
    public void setColor(String color) {
        this.color=color;
    }
    @Override
    public void move(){}
    @Override
    public void fly(){}    
}
Following the Interface Segregation Principle

public interface Toy {
     void setPrice(double price);
     void setColor(String color);
}
public interface Movable {
    void move();
}
public interface Flyable {
    void fly();
}
package guru.springframework.blog.interfacesegregationprinciple;

public class ToyHouse implements Toy {
    double price;
    String color;

    @Override
    public void setPrice(double price) {

        this.price = price;
    }
    @Override
    public void setColor(String color) {

        this.color=color;
    }
    @Override
    public String toString(){
        return &quot;ToyHouse: Toy house- Price: &quot;+price+&quot; Color: &quot;+color;
    }
}
package guru.springframework.blog.interfacesegregationprinciple;

public class ToyCar implements Toy, Movable {
    double price;
    String color;

    @Override
    public void setPrice(double price) {

        this.price = price;
    }

    @Override
    public void setColor(String color) {
     this.color=color;
    }
    @Override
    public void move(){
        System.out.println(&quot;ToyCar: Start moving car.&quot;);
    }
    @Override
    public String toString(){
        return &quot;ToyCar: Moveable Toy car- Price: &quot;+price+&quot; Color: &quot;+color;
    }
}
package guru.springframework.blog.interfacesegregationprinciple;

public class ToyPlane implements Toy, Movable, Flyable {
    double price;
    String color;

    @Override
    public void setPrice(double price) {
        this.price = price;
    }

    @Override
    public void setColor(String color) {
        this.color=color;
    }
    @Override
    public void move(){

        System.out.println(&quot;ToyPlane: Start moving plane.&quot;);
    }
    @Override
    public void fly(){

        System.out.println(&quot;ToyPlane: Start flying plane.&quot;);
    }
    @Override
    public String toString(){
        return &quot;ToyPlane: Moveable and flyable toy plane- Price: &quot;+price+&quot; Color: &quot;+color;
    }
}
package guru.springframework.blog.interfacesegregationprinciple;

public class ToyBuilder {
    public static ToyHouse buildToyHouse(){
        ToyHouse toyHouse=new ToyHouse();
        toyHouse.setPrice(15.00);
        toyHouse.setColor(&quot;green&quot;);
        return toyHouse;
        }
    public static ToyCar buildToyCar(){
        ToyCar toyCar=new ToyCar();
        toyCar.setPrice(25.00);
        toyCar.setColor(&quot;red&quot;);
        toyCar.move();
        return toyCar;
    }
    public static ToyPlane buildToyPlane(){
        ToyPlane toyPlane=new ToyPlane();
        toyPlane.setPrice(125.00);
        toyPlane.setColor(&quot;white&quot;);
        toyPlane.move();
        toyPlane.fly();
        return toyPlane;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;dependency-inversion&quot;&gt;Dependency Inversion:&lt;/h3&gt;

&lt;p&gt;Entities must depend on abstractions instead of concretions. Instead of using direct references from a high-level module to a low-level module, use abstractions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Principle violation example (bad):

public class ApplePhone {
    void acceptCall(){};
    void declineCall(){};
}
public class CarHandsFree {
    ApplePhone phone;
    void pairWithPhone(ApplePhone phone){
        this.phone = phone;
    }

    void attendCall(){
        this.phone.attendCall();    
    }
    void declineCall(){
        this.phone.declineCall();
    }
}
This does not hold good when you want to use a SamsungPhone. So all brands &amp;amp; models of phones that are bluetooth capable needs to confirm to a common abstraction that the hands-free can consume.

Principle adherence example (good):

public interface BluetoothCapabalePhone {
    void acceptCall();
    void declineCall();
}
public class ApplePhone implements BluetoothCapabalePhone {
    void acceptCall(){};
    void declineCall(){};
}
public class SamsungPhone implements BluetoothCapabalePhone {
    void acceptCall(){};
    void declineCall(){};
}
public class HtcPhone implements BluetoothCapabalePhone {
    void acceptCall(){};
    void declineCall(){};
}
public class CarHandsFree {
    BluetoothCapabalePhone phone;
    void pairWithPhone(BluetoothCapabalePhone phone){
        this.phone = phone;
    }
    void attendCall(){
        this.phone.attendCall();
    }
    void declineCall(){
        this.phone.declineCall();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 08 Jan 2019 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2019/01/08/java-solid-principal/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/08/java-solid-principal/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Bahmni Atom Feed Integration</title>
        <description>&lt;h2 id=&quot;bahmni-atom-feed-integration&quot;&gt;Bahmni Atom Feed Integration&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../../../../static/img/atom-feed-bahmni.jpg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Dec 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/12/31/bahmni-atom-feet-integration/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/31/bahmni-atom-feet-integration/</guid>
        
        
        <category>bahmni</category>
        
      </item>
    
      <item>
        <title>Adapter pattern</title>
        <description>&lt;h2 id=&quot;adapter-design-pattern&quot;&gt;Adapter Design pattern&lt;/h2&gt;
&lt;p&gt;Adapter Design pattern allows the interface of an existing class to be used as another interface. In summary, an adapter helps two incompatible interfaces to work together.
&lt;img src=&quot;../../../../static/img/adapter_pattern.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, we have two incompatible interfaces : MediaPlayer and MediaPackage. MP3 class is an implementation of the MediaPlayer interface and we have VLC and MP4 as implementations of the MediaPackage interface. We want to use MediaPackage implementations as MediaPlayer instances. So, we need to create an adapter to help to work with two incompatible classes.&lt;/p&gt;

&lt;p&gt;The Adapter will be named FormatAdapter and must implement the MediaPlayer interface. Furthermore, the FormatAdapter class must have a reference to MediaPackage, the incompatible interface.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface MediaPlayer {
 void play(String filename);
}

public interface MediaPackage {
 void playFile(String filename);
}

public class MP3 implements MediaPlayer {
 @Override
 public void play(String filename) {
    System.out.println(&quot;Playing MP3 File &quot; + filename);
 }
}

public class MP4 implements MediaPackage {
 @Override
 public void playFile(String filename) {
    System.out.println(&quot;Playing MP4 File &quot; + filename);
 }
}

public class VLC implements MediaPackage {
 @Override
 public void playFile(String filename) {
    System.out.println(&quot;Playing VLC File &quot; + filename);
 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here, we want to use VLC and MP4 instances as MediaPlayer instances. So, we need and adapter. This is the code of the FormatAdapter :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class FormatAdapter implements MediaPlayer {
 private MediaPackage media;
 public FormatAdapter(MediaPackage m) {
    media = m;
 }
 @Override
 public void play(String filename) {
   System.out.print(&quot;Using Adapter --&amp;gt; &quot;);
   media.playFile(filename);
 }
}

public class Main {
 public static void main(String[] args) {
    MediaPlayer player = new MP3();
    player.play(&quot;file.mp3&quot;);
    player = new FormatAdapter(new MP4());
    player.play(&quot;file.mp4&quot;);
    player = new FormatAdapter(new VLC());
    player.play(&quot;file.avi&quot;);
 }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Playing MP3 File file.mp3
Using Adapter --&amp;gt; Playing MP4 File file.mp4
Using Adapter --&amp;gt; Playing VLC File file.avi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://medium.com/@ssaurel/implement-the-adapter-design-pattern-in-java-f9adb6a8828f&quot;&gt;&lt;strong&gt;Medium.com&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 29 Dec 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/12/29/adapter-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/29/adapter-pattern/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Template method design pattern</title>
        <description>&lt;h2 id=&quot;template-method-design-pattern&quot;&gt;Template method design pattern&lt;/h2&gt;
&lt;p&gt;Template method defines the steps to execute an algorithm and it can provide default implementation that might be common for all or some of the subclasses.&lt;/p&gt;

&lt;p&gt;Let’s understand this pattern with an example, suppose we want to provide an algorithm to build a house. The steps need to be performed to build a house are – building foundation, building pillars, building walls and windows. The important point is that the we can’t change the order of execution because we can’t build windows before building the foundation. So in this case we can create a template method that will use different methods to build the house.&lt;/p&gt;

&lt;p&gt;Now building the foundation for a house is same for all type of houses, whether its a wooden house or a glass house. So we can provide base implementation for this, if subclasses want to override this method, they can but mostly it’s common for all the types of houses.&lt;/p&gt;

&lt;p&gt;To make sure that subclasses don’t override the template method, we should make it final.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
package com.journaldev.design.template;

public abstract class HouseTemplate {

	//template method, final so subclasses can't override
	public final void buildHouse(){
		buildFoundation();
		buildPillars();
		buildWalls();
		buildWindows();
		System.out.println(&quot;House is built.&quot;);
	}

	//default implementation
	private void buildWindows() {
		System.out.println(&quot;Building Glass Windows&quot;);
	}

	//methods to be implemented by subclasses
	public abstract void buildWalls();
	public abstract void buildPillars();

	private void buildFoundation() {
		System.out.println(&quot;Building foundation with cement,iron rods and sand&quot;);
	}
}

package com.journaldev.design.template;

public class WoodenHouse extends HouseTemplate {

	@Override
	public void buildWalls() {
		System.out.println(&quot;Building Wooden Walls&quot;);
	}

	@Override
	public void buildPillars() {
		System.out.println(&quot;Building Pillars with Wood coating&quot;);
	}

}

package com.journaldev.design.template;

public class GlassHouse extends HouseTemplate {

	@Override
	public void buildWalls() {
		System.out.println(&quot;Building Glass Walls&quot;);
	}

	@Override
	public void buildPillars() {
		System.out.println(&quot;Building Pillars with glass coating&quot;);
	}

}


package com.journaldev.design.template;

public class HousingClient {

	public static void main(String[] args) {
		
		HouseTemplate houseType = new WoodenHouse();
		
		//using template method
		houseType.buildHouse();
		System.out.println(&quot;************&quot;);
		
		houseType = new GlassHouse();
		
		houseType.buildHouse();
	}

}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Output of the above program is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Building foundation with cement,iron rods and sand
Building Pillars with Wood coating
Building Wooden Walls
Building Glass Windows
House is built.
************
Building foundation with cement,iron rods and sand
Building Pillars with glass coating
Building Glass Walls
Building Glass Windows
House is built.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;template-method-design-pattern-in-jdk&quot;&gt;Template Method Design Pattern in JDK&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;All non-abstract methods of java.io.InputStream, java.io.OutputStream, java.io.Reader and java.io.Writer.&lt;/li&gt;
  &lt;li&gt;All non-abstract methods of java.util.AbstractList, java.util.AbstractSet and java.util.AbstractMap.
    &lt;h5 id=&quot;template-method-design-pattern-important-points&quot;&gt;Template Method Design Pattern Important Points&lt;/h5&gt;
  &lt;/li&gt;
  &lt;li&gt;Template method should consists of certain steps whose order is fixed and for some of the methods, implementation differs from base class to subclass. Template method should be final.&lt;/li&gt;
  &lt;li&gt;Most of the times, subclasses calls methods from super class but in template pattern, superclass template method calls methods from subclasses, this is known as Hollywood Principle – “don’t call us, we’ll call you.”.&lt;/li&gt;
  &lt;li&gt;Methods in base class with default implementation are referred as Hooks and they are intended to be overridden by subclasses, if you want some of the methods to be not overridden, you can make them final, for example in our case we can make buildFoundation() method final because if we don’t want subclasses to override it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.journaldev.com/1763/template-method-design-pattern-in-java&quot;&gt;&lt;strong&gt;JournalDev&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 28 Dec 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/12/28/template-method-design-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/28/template-method-design-pattern/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Strategy pattern</title>
        <description>&lt;h2 id=&quot;strategy-design-pattern&quot;&gt;Strategy Design pattern&lt;/h2&gt;
&lt;p&gt;Strategy pattern is used when we have multiple algorithm for a specific task and client decides the actual implementation to be used at runtime.&lt;/p&gt;

&lt;p&gt;One of the best example of strategy pattern is Collections.sort() method that takes Comparator parameter. Based on the different implementations of Comparator interfaces, the Objects are getting sorted in different ways.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface PaymentStrategy {
	public void pay(int amount);
}

public class CreditCardStrategy implements PaymentStrategy {

	private String name;
	private String cardNumber;
	private String cvv;
	private String dateOfExpiry;
	
	public CreditCardStrategy(String nm, String ccNum, String cvv, String expiryDate){
		this.name=nm;
		this.cardNumber=ccNum;
		this.cvv=cvv;
		this.dateOfExpiry=expiryDate;
	}
	@Override
	public void pay(int amount) {
		System.out.println(amount +&quot; paid with credit/debit card&quot;);
	}

}

public class PaypalStrategy implements PaymentStrategy {

	private String emailId;
	private String password;
	
	public PaypalStrategy(String email, String pwd){
		this.emailId=email;
		this.password=pwd;
	}
	
	@Override
	public void pay(int amount) {
		System.out.println(amount + &quot; paid using Paypal.&quot;);
	}

}

public class Item {

	private String upcCode;
	private int price;
	
	public Item(String upc, int cost){
		this.upcCode=upc;
		this.price=cost;
	}

	public String getUpcCode() {
		return upcCode;
	}

	public int getPrice() {
		return price;
	}
	
}

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

public class ShoppingCart {

	//List of items
	List&amp;lt;Item&amp;gt; items;
	
	public ShoppingCart(){
		this.items=new ArrayList&amp;lt;Item&amp;gt;();
	}
	
	public void addItem(Item item){
		this.items.add(item);
	}
	
	public void removeItem(Item item){
		this.items.remove(item);
	}
	
	public int calculateTotal(){
		int sum = 0;
		for(Item item : items){
			sum += item.getPrice();
		}
		return sum;
	}
	
	public void pay(PaymentStrategy paymentMethod){
		int amount = calculateTotal();
		paymentMethod.pay(amount);
	}
}

public class ShoppingCartTest {

	public static void main(String[] args) {
		ShoppingCart cart = new ShoppingCart();
		
		Item item1 = new Item(&quot;1234&quot;,10);
		Item item2 = new Item(&quot;5678&quot;,40);
		
		cart.addItem(item1);
		cart.addItem(item2);
		
		//pay by paypal
		cart.pay(new PaypalStrategy(&quot;myemail@example.com&quot;, &quot;mypwd&quot;));
		
		//pay by credit card
		cart.pay(new CreditCardStrategy(&quot;Pankaj Kumar&quot;, &quot;1234567890123456&quot;, &quot;786&quot;, &quot;12/15&quot;));
	}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.journaldev.com/1754/strategy-design-pattern-in-java-example-tutorial&quot;&gt;&lt;strong&gt;JournalDev&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 27 Dec 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/12/27/strategy-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/27/strategy-pattern/</guid>
        
        
      </item>
    
      <item>
        <title>Factory pattern</title>
        <description>&lt;h2 id=&quot;factory-design-pattern&quot;&gt;Factory Design pattern&lt;/h2&gt;
&lt;p&gt;Factory design pattern is used when we have a super class with multiple sub-classes and based on input, we need to return one of the sub-class.&lt;/p&gt;

&lt;h5 id=&quot;advantage-of-factory-design-pattern&quot;&gt;Advantage of Factory Design Pattern&lt;/h5&gt;
&lt;p&gt;Factory Method Pattern allows the sub-classes to choose the type of objects to create.
It promotes the loose-coupling by eliminating the need to bind application-specific classes into the code.&lt;/p&gt;

&lt;p&gt;Step 1: Create a Plan abstract class.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;      
abstract class Plan{  
         protected double rate;  
         abstract void getRate();  
   
         public void calculateBill(int units){  
              System.out.println(units*rate);  
          }  
}//end of Plan class. 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Step 2: Create the concrete classes that extends Plan abstract class.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class  DomesticPlan extends Plan{  
        //@override  
         public void getRate(){  
             rate=3.50;              
        }  
   }//end of DomesticPlan class.  
class  CommercialPlan extends Plan{  
   //@override   
    public void getRate(){   
        rate=7.50;  
   }   
/end of CommercialPlan class.  
class  InstitutionalPlan extends Plan{  
   //@override  
    public void getRate(){   
        rate=5.50;  
   }   
/end of InstitutionalPlan class.  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Step 3: Create a GetPlanFactory to generate object of concrete classes based on given information..&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class GetPlanFactory{  
   //use getPlan method to get object of type Plan   
       public Plan getPlan(String planType){  
            if(planType == null){  
             return null;  
            }  
          if(planType.equalsIgnoreCase(&quot;DOMESTICPLAN&quot;)) {  
                 return new DomesticPlan();  
               }   
           else if(planType.equalsIgnoreCase(&quot;COMMERCIALPLAN&quot;)){  
                return new CommercialPlan();  
            }   
          else if(planType.equalsIgnoreCase(&quot;INSTITUTIONALPLAN&quot;)) {  
                return new InstitutionalPlan();  
          }  
      return null;  
   }  
}//end of GetPlanFactory class.  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Step 4: Generate Bill by using the GetPlanFactory to get the object of concrete classes by passing an information such as type of plan DOMESTICPLAN or COMMERCIALPLAN or INSTITUTIONALPLAN.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;    
class GenerateBill{  
    public static void main(String args[])throws IOException{  
      GetPlanFactory planFactory = new GetPlanFactory();  
        
      System.out.print(&quot;Enter the name of plan for which the bill will be generated: &quot;);  
      BufferedReader br=new BufferedReader(new InputStreamReader(System.in));  
  
      String planName=br.readLine();  
      System.out.print(&quot;Enter the number of units for bill will be calculated: &quot;);  
      int units=Integer.parseInt(br.readLine());  
  
      Plan p = planFactory.getPlan(planName);  
      //call getRate() method and calculateBill()method of DomesticPaln.  
  
       System.out.print(&quot;Bill amount for &quot;+planName+&quot; of  &quot;+units+&quot; units is: &quot;);  
           p.getRate();  
           p.calculateBill(units);  
            }  
    }//end of GenerateBill class.  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.javatpoint.com/factory-method-design-pattern&quot;&gt;&lt;strong&gt;JournalDev&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 27 Dec 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/12/27/factory-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/27/factory-pattern/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Software Development Life Cycle</title>
        <description>&lt;h2 id=&quot;software-development-life-cycle&quot;&gt;Software Development Life Cycle&lt;/h2&gt;

&lt;p&gt;Software Development Life Cycle (SDLC) is a process used by the software industry to design, develop and test high quality softwares. The SDLC aims to produce a high-quality software that meets or exceeds customer expectations, reaches completion within times and cost estimates.&lt;/p&gt;

&lt;h3 id=&quot;what-is-sdlc&quot;&gt;What is SDLC?&lt;/h3&gt;

&lt;p&gt;SDLC is a process followed for a software project, within a software organization. It consists of a detailed plan describing how to develop, maintain, replace and alter or enhance specific software. The life cycle defines a methodology for improving the quality of software and the overall development process.&lt;/p&gt;

&lt;p&gt;The following figure is a graphical representation of the various stages of a typical SDLC.&lt;/p&gt;

&lt;p&gt;SDLC Models&lt;/p&gt;

&lt;p&gt;There are various software development life cycle models defined and designed which are followed during the software development process. These models are also referred as Software Development Process Models”. Each process model follows a Series of steps unique to its type to ensure success in the process of software development.&lt;/p&gt;

&lt;p&gt;Following are the most important and popular SDLC models followed in the industry &amp;amp;miuns;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Waterfall Model&lt;/li&gt;
  &lt;li&gt;Iterative Model&lt;/li&gt;
  &lt;li&gt;Spiral Model&lt;/li&gt;
  &lt;li&gt;V-Model&lt;/li&gt;
  &lt;li&gt;Big Bang Model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other related methodologies are Agile Model, RAD Model, Rapid Application Development and Prototyping Models.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Dec 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/12/26/software-development-life-cycle/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/26/software-development-life-cycle/</guid>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Software Development Life Cycle-Model</title>
        <description>&lt;h2 id=&quot;waterfall-model---design&quot;&gt;Waterfall Model - Design&lt;/h2&gt;

&lt;p&gt;Waterfall approach was first SDLC Model to be used widely in Software Engineering to ensure success of the project. In “The Waterfall” approach, the whole process of software development is divided into separate phases. In this Waterfall model, typically, the outcome of one phase acts as the input for the next phase sequentially.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../static/img/sdlc_waterfall_model.jpg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 26 Dec 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/12/26/sdlc-models/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/26/sdlc-models/</guid>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>service oriented architecture</title>
        <description>&lt;h3 id=&quot;soa-service-oriented-architecture-principles&quot;&gt;SOA (Service Oriented Architecture) Principles&lt;/h3&gt;

&lt;p&gt;A service-oriented architecture (SOA) is an architectural pattern in computer software design in which application components provide services to other components via a communications protocol, typically over a network. The principles of service-orientation are independent of any product, vendor or technology.&lt;/p&gt;

&lt;p&gt;SOA just makes it easier for software components over various networks to work with each other.&lt;/p&gt;

&lt;p&gt;Web services which are built as per the SOA architecture tend to make web service more independent. The web services themselves can exchange data with each other and because of the underlying principles on which they are created, they don’t need any sort of human interaction and also don’t need any code modifications. It ensures that the web services on a network can interact with each other seamlessly.&lt;/p&gt;

&lt;h5 id=&quot;soa-is-based-on-some-key-principles-which-are-mentioned-below&quot;&gt;SOA is based on some key principles which are mentioned below&lt;/h5&gt;

&lt;h6 id=&quot;standardized-service-contract&quot;&gt;Standardized Service Contract&lt;/h6&gt;

&lt;p&gt;Services adhere to a service description. A service must have some sort of description which describes what the service is about. This makes it easier for client applications to understand what the service does.&lt;/p&gt;

&lt;h6 id=&quot;loose-coupling&quot;&gt;Loose Coupling&lt;/h6&gt;

&lt;p&gt;Less dependency on each other. This is one of the main characteristics of web services which just states that there should be as less dependency as possible between the web services and the client invoking the web service. So if the service functionality changes at any point in time, it should not break the client application or stop it from working.&lt;/p&gt;

&lt;h6 id=&quot;service-abstraction&quot;&gt;Service Abstraction&lt;/h6&gt;

&lt;p&gt;Services hide the logic they encapsulate from the outside world. The service should not expose how it executes its functionality; it should just tell the client application on what it does and not on how it does it.&lt;/p&gt;

&lt;h6 id=&quot;service-reusability&quot;&gt;Service Reusability&lt;/h6&gt;

&lt;p&gt;Logic is divided into services with the intent of maximizing reuse. In any development company re-usability is a big topic because obviously one wouldn’t want to spend time and effort building the same code again and again across multiple applications which require them. Hence, once the code for a web service is written it should have the ability work with various application types.&lt;/p&gt;

&lt;h6 id=&quot;service-autonomy&quot;&gt;Service Autonomy&lt;/h6&gt;

&lt;p&gt;Services should have control over the logic they encapsulate. The service knows everything on what functionality it offers and hence should also have complete control over the code it contains.&lt;/p&gt;

&lt;h6 id=&quot;service-statelessness&quot;&gt;Service Statelessness&lt;/h6&gt;

&lt;p&gt;Ideally, services should be stateless. This means that services should not withhold information from one state to the other. This would need to be done from either the client application. An example can be an order placed on a shopping site. Now you can have a web service which gives you the price of a particular item. But if the items are added to a shopping cart and the web page navigates to the page where you do the payment, the responsibility of the price of the item to be transferred to the payment page should not be done by the web service. Instead, it needs to be done by the web application.&lt;/p&gt;

&lt;h6 id=&quot;service-discoverability&quot;&gt;Service Discoverability&lt;/h6&gt;

&lt;p&gt;Services can be discovered (usually in a service registry). We have already seen this in the concept of the UDDI, which performs a registry which can hold information about the web service.&lt;/p&gt;

&lt;h6 id=&quot;service-composability&quot;&gt;Service Composability&lt;/h6&gt;

&lt;p&gt;Services break big problems into little problems. One should never embed all functionality of an application into one single service but instead, break the service down into modules each with a separate business functionality.&lt;/p&gt;

&lt;h6 id=&quot;service-interoperability&quot;&gt;Service Interoperability&lt;/h6&gt;

&lt;p&gt;Services should use standards that allow diverse subscribers to use the service. In web services, standards as XML and communication over HTTP is used to ensure it conforms to this principle.&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Dec 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/12/20/soa/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/20/soa/</guid>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Database Remote Connection</title>
        <description>&lt;h2 id=&quot;database-remote-connection-postgresql&quot;&gt;Database Remote Connection Postgresql&lt;/h2&gt;
&lt;p&gt;To enable remote access to PostgreSQL server follow the steps below:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Connect to the PostgreSQL server via SSH .&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Add the following line to the end of /var/lib/pgsql/data/postgresql.conf file:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; listen_addresses = '*'
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;If you can’t find the postgresql.conf file you can run the command&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;psql -U postgres -c 'SHOW config_file'&quot;;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following line to the end of /var/lib/pgsql/data/pg_hba.conf file:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; host all all 203.0.113.2/32 md5
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;203.0.113.2/32 is the remote IP from which connection is allowed. If you want to allow connection from any IP specify 0.0.0.0/0 .&lt;/p&gt;

    &lt;p&gt;md5 is the authentication method, which requires the client to supply a double-MD5-hashed password for authentication.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Restart PostgreSQL server to apply the changes:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; service postgresql restart
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;connect-postgresql-with-database-tools&quot;&gt;Connect postgresql with Database tools&lt;/h4&gt;

&lt;p&gt;Here we have shown intellij database tools.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../static/img/postgresql.PNG&quot; alt=&quot;Image&quot; /&gt;
SSH configuration:&lt;/p&gt;

&lt;p&gt;Here user &amp;amp; password is the host machine User &amp;amp; Password&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../static/img/postgresql.PNG&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Dec 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/12/20/database-remote-connection/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/20/database-remote-connection/</guid>
        
        
        <category>devops</category>
        
      </item>
    
  </channel>
</rss>
