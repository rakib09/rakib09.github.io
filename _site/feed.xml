<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rakib Hasan's Blog</title>
    <description>Rakib's Learning &amp; Blogs</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 09 Mar 2018 15:46:05 +0600</pubDate>
    <lastBuildDate>Fri, 09 Mar 2018 15:46:05 +0600</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Design Pattern</title>
        <description>&lt;h2 id=&quot;design-pattern&quot;&gt;Design Pattern&lt;/h2&gt;
&lt;p&gt;A design pattern is a well described solution to a common software problem.&lt;/p&gt;

&lt;h5 id=&quot;advantage-of-design-pattern&quot;&gt;Advantage of design pattern:&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;They are reusable in multiple projects.&lt;/li&gt;
  &lt;li&gt;They provide the solutions that help to define the system architecture.&lt;/li&gt;
  &lt;li&gt;They capture the software engineering experiences.&lt;/li&gt;
  &lt;li&gt;They provide transparency to the design of an application.&lt;/li&gt;
  &lt;li&gt;They are well-proved and testified solutions since they have been built upon the knowledge and experience of expert software developers.&lt;/li&gt;
  &lt;li&gt;Design patterns don?t guarantee an absolute solution to a problem. They provide clarity to the system architecture and the possibility of building a better system.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;when-should-we-use-the-design-patterns&quot;&gt;When should we use the design patterns?&lt;/h5&gt;
&lt;p&gt;We must use the design patterns during the analysis and requirement phase of SDLC(Software Development Life Cycle).&lt;/p&gt;

&lt;p&gt;Design patterns ease the analysis and requirement phase of SDLC by providing information based on prior hands-on experiences.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.tutorialspoint.com/design_pattern/facade_pattern.htm&quot;&gt;tutorialspoint&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Mar 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/03/09/design-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/09/design-pattern/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>SDKMAN</title>
        <description>&lt;h2 id=&quot;sdkman&quot;&gt;SDKMAN&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;GIT&lt;/li&gt;
  &lt;li&gt;JAVA&lt;/li&gt;
  &lt;li&gt;http://sdkman.io/&lt;/li&gt;
  &lt;li&gt;Multi-platform-&amp;gt; Powershell CLI version&lt;/li&gt;
  &lt;li&gt;Open powershell from windows pc then type
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [Environment]::GetEnvironmentVariable(&quot;PSModulePath&quot;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Then get the following&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  C:\Users\rakib\OneDrive\Documents\WindowsPowerShell\Modules;C:\Program Files\WindowsPowerShell\Modules;C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Then Type&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; New-Item C:\Users\rakib\OneDrive\Documents\WindowsPowerShell\Modules -ItemType Directory
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then Type&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   cd C:\Users\rakib\OneDrive\Documents\WindowsPowerShell\Modules
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then clone by&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   git clone https://github.com/flofreud/posh-gvm.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then Type&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;New-Item -path $profile -type file -force
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Close power shell &amp;amp; open in administrator mode &amp;amp; Then Type&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Install-Module posh-gvm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then type&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set-ExecutionPolicy RemoteSigned
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/14/sdkman/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/14/sdkman/</guid>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>DRY</title>
        <description>&lt;h2 id=&quot;dry-dont-repeat-yourself&quot;&gt;DRY (Don’t Repeat Yourself)&lt;/h2&gt;

&lt;h5 id=&quot;in-wikipedia&quot;&gt;In Wikipedia&lt;/h5&gt;
&lt;p&gt;DRY- A Principle of software development, aimed at reducing repetition of information of all kinds.&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/14/dry/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/14/dry/</guid>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>Singleton Pattern</title>
        <description>&lt;h2 id=&quot;singleton-pattern&quot;&gt;Singleton Pattern&lt;/h2&gt;
&lt;p&gt;Java Singleton Design Pattern Best Practices with Examples
Java Singleton Pattern is one of the Gangs of Four Design patterns and comes in the Creational Design Pattern category. From the definition, it seems to be a very simple design pattern but when it comes to implementation, it comes with a lot of implementation concerns. The implementation of Java Singleton pattern has always been a controversial topic among developers. Here we will learn about Singleton design pattern principles, different ways to implement Singleton design pattern and some of the best practices for its usage.&lt;/p&gt;
&lt;h4 id=&quot;java-singleton&quot;&gt;Java Singleton&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Singleton pattern restricts the instantiation of a class and ensures that only one instance of the class exists in the java virtual machine.&lt;/li&gt;
  &lt;li&gt;The singleton class must provide a global access point to get the instance of the class.&lt;/li&gt;
  &lt;li&gt;Singleton pattern is used for logging, drivers objects, caching and thread pool.&lt;/li&gt;
  &lt;li&gt;Singleton design pattern is also used in other design patterns like Abstract Factory, Builder, Prototype, Facade etc.&lt;/li&gt;
  &lt;li&gt;Singleton design pattern is used in core java classes also, for example java.lang.Runtime, java.awt.Desktop.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;java-singleton-pattern&quot;&gt;Java Singleton Pattern&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Eager initialization&lt;/li&gt;
  &lt;li&gt;Static block initialization&lt;/li&gt;
  &lt;li&gt;Lazy Initialization&lt;/li&gt;
  &lt;li&gt;Thread Safe Singleton&lt;/li&gt;
  &lt;li&gt;Bill Pugh Singleton Implementation&lt;/li&gt;
  &lt;li&gt;Using Reflection to destroy Singleton Pattern&lt;/li&gt;
  &lt;li&gt;Enum Singleton&lt;/li&gt;
  &lt;li&gt;Serialization and Singleton&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;eager-initialization&quot;&gt;Eager initialization&lt;/h4&gt;
&lt;p&gt;In eager initialization, the instance of Singleton Class is created at the time of class loading, this is the easiest method to create a singleton class but it has a drawback that instance is created even though client application might not be using it.
Here is the implementation of static initialization singleton class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class EagerInitializedSingleton {
    
    private static final EagerInitializedSingleton instance = new EagerInitializedSingleton();
    
    //private constructor to avoid client applications to use constructor
    private EagerInitializedSingleton(){}

    public static EagerInitializedSingleton getInstance(){
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If your singleton class is not using a lot of resources, this is the approach to use. But in most of the scenarios, Singleton classes are created for resources such as File System, Database connections etc and we should avoid the instantiation until unless client calls the getInstance method. Also, this method doesn’t provide any options for exception handling.&lt;/p&gt;
&lt;h4 id=&quot;static-block-initialization&quot;&gt;Static block initialization&lt;/h4&gt;
&lt;p&gt;Static block initialization implementation is similar to eager initialization, except that instance of class is created in the static block that provides option for exception handling.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class StaticBlockSingleton {

    private static StaticBlockSingleton instance;
    
    private StaticBlockSingleton(){}
    
    //static block initialization for exception handling
    static{
        try{
            instance = new StaticBlockSingleton();
        }catch(Exception e){
            throw new RuntimeException(&quot;Exception occured in creating singleton instance&quot;);
        }
    }
    
    public static StaticBlockSingleton getInstance(){
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Both eager initialization and static block initialization creates the instance even before it’s being used and that is not the best practice to use. So in further sections, we will learn how to create Singleton class that supports lazy initialization.&lt;/p&gt;

&lt;h4 id=&quot;lazy-initialization&quot;&gt;Lazy Initialization&lt;/h4&gt;
&lt;p&gt;Lazy initialization method to implement Singleton pattern creates the instance in the global access method. Here is the sample code for creating Singleton class with this approach.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class LazyInitializedSingleton {

    private static LazyInitializedSingleton instance;
    
    private LazyInitializedSingleton(){}
    
    public static LazyInitializedSingleton getInstance(){
        if(instance == null){
            instance = new LazyInitializedSingleton();
        }
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above implementation works fine incase of single threaded environment but when it comes to multithreaded systems, it can cause issues if multiple threads are inside the if loop at the same time. It will destroy the singleton pattern and both threads will get the different instances of singleton class. In next section, we will see different ways to create a thread-safe singleton class.&lt;/p&gt;
&lt;h4 id=&quot;thread-safe-singleton&quot;&gt;Thread Safe Singleton&lt;/h4&gt;
&lt;p&gt;The easier way to create a thread-safe singleton class is to make the global access method synchronized, so that only one thread can execute this method at a time. General implementation of this approach is like the below class.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class ThreadSafeSingleton {

    private static ThreadSafeSingleton instance;
    
    private ThreadSafeSingleton(){}
    
    public static synchronized ThreadSafeSingleton getInstance(){
        if(instance == null){
            instance = new ThreadSafeSingleton();
        }
        return instance;
    }
    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Above implementation works fine and provides thread-safety but it reduces the performance because of cost associated with the synchronized method, although we need it only for the first few threads who might create the separate instances (Read: Java Synchronization). To avoid this extra overhead every time, double checked locking principle is used. In this approach, the synchronized block is used inside the if condition with an additional check to ensure that only one instance of singleton class is created.
Below code snippet provides the double checked locking implementation.
public static ThreadSafeSingleton getInstanceUsingDoubleLocking(){
    if(instance == null){
        synchronized (ThreadSafeSingleton.class) {
            if(instance == null){
                instance = new ThreadSafeSingleton();
            }
        }
    }
    return instance;
}&lt;/p&gt;

&lt;h4 id=&quot;bill-pugh-singleton-implementation&quot;&gt;Bill Pugh Singleton Implementation&lt;/h4&gt;
&lt;p&gt;Prior to Java 5, java memory model had a lot of issues and above approaches used to fail in certain scenarios where too many threads try to get the instance of the Singleton class simultaneously. So Bill Pugh came up with a different approach to create the Singleton class using a inner static helper class. The Bill Pugh Singleton implementation goes like this;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.journaldev.singleton;

public class BillPughSingleton {

    private BillPughSingleton(){}
    
    private static class SingletonHelper{
        private static final BillPughSingleton INSTANCE = new BillPughSingleton();
    }
    
    public static BillPughSingleton getInstance(){
        return SingletonHelper.INSTANCE;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice the private inner static class that contains the instance of the singleton class. When the singleton class is loaded, SingletonHelper class is not loaded into memory and only when someone calls the getInstance method, this class gets loaded and creates the Singleton class instance.
This is the most widely used approach for Singleton class as it doesn’t require synchronization. I am using this approach in many of my projects and it’s easy to understand and implement also.&lt;/p&gt;

&lt;h4 id=&quot;advantage-of-singleton-design-pattern&quot;&gt;Advantage of Singleton design pattern&lt;/h4&gt;
&lt;p&gt;Saves memory because object is not created at each request. Only single instance is reused again and again.&lt;/p&gt;
&lt;h4 id=&quot;usage-of-singleton-design-pattern&quot;&gt;Usage of Singleton design pattern&lt;/h4&gt;
&lt;p&gt;Singleton pattern is mostly used in multi-threaded and database applications. It is used in logging, caching, thread pools, configuration settings etc.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-examples?utm_source=website&amp;amp;utm_medium=sidebar&amp;amp;utm_campaign=DesignPattern-Sidebar-Widget&quot;&gt;&lt;strong&gt;JournalDev&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/01/singleton-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/01/singleton-pattern/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Facade Pattern</title>
        <description>&lt;h2 id=&quot;facade-pattern&quot;&gt;Facade Pattern&lt;/h2&gt;
&lt;p&gt;Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system. This type of design pattern comes under structural pattern as this pattern adds an interface to existing system to hide its complexities.&lt;/p&gt;

&lt;p&gt;This pattern involves a single class which provides simplified methods required by client and delegates calls to methods of existing system classes.&lt;/p&gt;

&lt;h4 id=&quot;implementation&quot;&gt;Implementation&lt;/h4&gt;
&lt;p&gt;We are going to create a Shape interface and concrete classes implementing the Shape interface. A facade class ShapeMaker is defined as a next step.&lt;/p&gt;

&lt;p&gt;ShapeMaker class uses the concrete classes to delegate user calls to these classes. FacadePatternDemo, our demo class, will use ShapeMaker class to show the results.&lt;/p&gt;

&lt;p&gt;Facade Pattern UML Diagram
&lt;img src=&quot;../../static/img/facade_pattern.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;step-1-create-an-interface&quot;&gt;Step 1 Create an interface.&lt;/h5&gt;

&lt;p&gt;Shape.java&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface Shape {
   void draw();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;step-2-create-concrete-classes-implementing-the-same-interface&quot;&gt;Step 2 Create concrete classes implementing the same interface.&lt;/h5&gt;

&lt;p&gt;Rectangle.java&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Rectangle implements Shape {

   @Override
   public void draw() {
      System.out.println(&quot;Rectangle::draw()&quot;);
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Square.java&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Square implements Shape {

   @Override
   public void draw() {
      System.out.println(&quot;Square::draw()&quot;);
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Circle.java&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Circle implements Shape {

   @Override
   public void draw() {
      System.out.println(&quot;Circle::draw()&quot;);
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;step-3-create-a-facade-class&quot;&gt;Step 3 Create a facade class.&lt;/h5&gt;

&lt;p&gt;ShapeMaker.java&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ShapeMaker {
   private Shape circle;
   private Shape rectangle;
   private Shape square;

   public ShapeMaker() {
      circle = new Circle();
      rectangle = new Rectangle();
      square = new Square();
   }

   public void drawCircle(){
      circle.draw();
   }
   public void drawRectangle(){
      rectangle.draw();
   }
   public void drawSquare(){
      square.draw();
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;step-4-use-the-facade-to-draw-various-types-of-shapes&quot;&gt;Step 4 Use the facade to draw various types of shapes.&lt;/h5&gt;

&lt;p&gt;FacadePatternDemo.java&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class FacadePatternDemo {
   public static void main(String[] args) {
      ShapeMaker shapeMaker = new ShapeMaker();

      shapeMaker.drawCircle();
      shapeMaker.drawRectangle();
      shapeMaker.drawSquare();		
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;step-5-verify-the-output&quot;&gt;Step 5 Verify the output.&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Circle::draw()
Rectangle::draw()
Square::draw()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.tutorialspoint.com/design_pattern/facade_pattern.htm&quot;&gt;tutorialspoint&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/01/facade-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/01/facade-pattern/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Difference</title>
        <description>&lt;h2 id=&quot;difference&quot;&gt;Difference&lt;/h2&gt;
&lt;h3 id=&quot;equals-vs-&quot;&gt;equals vs ‘==’&lt;/h3&gt;

&lt;p&gt;In General We use == operator for reference or memory location comparision 
whereas .equals() method for content comparision.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String s1 = new String(&quot;rakib&quot;);
String s2 = new String(&quot;rakib&quot;);
System.out.println(s1==s2);         // false
System.out.println(s1.equals(s2));  // true

StringBuffer sf1 = new StringBuffer(&quot;rakib&quot;);
StringBuffer sf2 = new StringBuffer(&quot;rakib&quot;);
System.out.println(sf1 == sf2);     // false
System.out.println(s1 == sf2);     // CE: incomparable types: java.lang.String and java.lang.StringBuffer
System.out.println(s1.equals(sf2));     // false

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;.euals() method present in object class also meant for reference comparision only based on our requirement we can override for content comparision.&lt;/li&gt;
  &lt;li&gt;In String class, all wrapper class and all collection classes .equals() method is overriden for content comparision.&lt;/li&gt;
  &lt;li&gt;If r1 == r2 is true then r1.equals(r2) is always true.&lt;/li&gt;
  &lt;li&gt;If two objects are not equal by == operator then we can’t conclude anything about .equals method. It may return true or false. 
 ie. if r1 == r2 is false then r1.equals(r2) may return true or false&lt;/li&gt;
  &lt;li&gt;If r1.equals(r2) is true then r1 == r2 may true or false&lt;/li&gt;
  &lt;li&gt;if r1.equals(r2) is false then r1 == r2 is always&lt;/li&gt;
  &lt;li&gt;Either parent to child or Child to parent are same type&lt;/li&gt;
  &lt;li&gt;r == null &amp;amp;&amp;amp; r.equals(null) return false&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/01/deffierence/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/01/deffierence/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Collection Framework</title>
        <description>&lt;h2 id=&quot;collection-framework&quot;&gt;Collection Framework&lt;/h2&gt;

&lt;h4 id=&quot;list-vs-arraylist&quot;&gt;List vs ArrayList&lt;/h4&gt;
&lt;p&gt;List is in interface while ArrayList is a class.&lt;/p&gt;

&lt;h5 id=&quot;why-store-arraylist-object-on-list-variable&quot;&gt;Why store ArrayList object on List variable?&lt;/h5&gt;
&lt;p&gt;You might have seen something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;List&amp;lt;Movie&amp;gt; listOfMovies = new ArrayList&amp;lt;Movie&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;here we are using a List as a type of variable to store an object of ArrayList class, created using new() operator.&lt;/p&gt;

&lt;p&gt;The answer is to take advantage of Polymorphism. If you use interface than in future if the new implementation is shipped then you are not required to change your program. For example, any program written using List will work as expected whether you pass a LinkedList, Vector or ArrayList, because they all implements List interface, they obey the contract exposed by List interface.&lt;/p&gt;

&lt;p&gt;The only difference comes in performance, which is actually on of the driver for change. In short, if you program using interface, tomorrow if a better implementation of your interface is available then you can switch to that without making nay further change on the client side (part of the program which uses that interface).&lt;/p&gt;

&lt;h4 id=&quot;arraylist-vs-linklist&quot;&gt;ArrayList vs LinkList&lt;/h4&gt;

&lt;p&gt;Performance  :  Performance of ArrayList and LinkedList depends on the type of operation&lt;/p&gt;

&lt;p&gt;a. get(int index) or search operation :  ArrayList get(int index) operation runs in constant time i.e O(1)  while LinkedList get(int index) operation run time is O(n) .&lt;/p&gt;

&lt;p&gt;b. insert() or add(Object) operation :  Insertions in LinkedList are generally fast as compare to ArrayList.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;ArrayList&lt;/th&gt;
      &lt;th&gt;LinkedList&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Implementation&lt;/td&gt;
      &lt;td&gt;Resizable Array&lt;/td&gt;
      &lt;td&gt;Douby-LinkedList&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ReverseIterator&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes , descendingIterator()&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Initial Capacity&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;Constructs empty list&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;get(int) operation&lt;/td&gt;
      &lt;td&gt;Fast&lt;/td&gt;
      &lt;td&gt;Slow in comparision&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;add(int) operation&lt;/td&gt;
      &lt;td&gt;Slow in comparision&lt;/td&gt;
      &lt;td&gt;Fast&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Memory Overhead&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/02/01/collection-framwork/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/01/collection-framwork/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Spring Introduction</title>
        <description>&lt;h2 id=&quot;spring-introduction&quot;&gt;Spring Introduction&lt;/h2&gt;

&lt;p&gt;Spring developer name: Rod Jhonson &amp;amp; initial organization name is spring.org &amp;amp; now is pivotal. Springs initial name is interface 21.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Jan 2018 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2018/01/31/spring-introduction/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/31/spring-introduction/</guid>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>AngularJS - $pristine, $dirty, $valid, $invalid</title>
        <description>&lt;p&gt;Today we will go through the AngularJS Forms validations. Forms are important part of any application. They help us to collect information from user so that it can be processed for corresponding activity. We need to validate form so that only the valid values are put in the form. For that we use JavaScript or any other JavaScript library like jQuery.&lt;/p&gt;

&lt;p&gt;Angular also provides some help in this context. We can validate a form and see that the required validations work correctly. It provides different objects to the form. They are very helpful while validating forms:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$pristine: It will be TRUE, if the user has not interacted with the form yet
$dirty: It will be TRUE, if the user has already interacted with the form.
$valid: It will be TRUE, if all containing form and controls are valid
$invalid: It will be TRUE, if at least one containing form and control is invalid.
$error: Is an object hash, containing references to all invalid controls or forms, where: 
    keys are validation tokens (error names)
    values are arrays of controls or forms that are invalid with given error.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are some built in validation tokens, that can help in validating form:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;email
max
maxlength
min
minlength
number
pattern
required
url
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In accordance with these AngularJS also provides corresponding CSS classes for them. We can use them for validation purpose.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng-pristine
ng-dirty
ng-valid
ng-invalid
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lets see how we can use them. Usage:
In Form: myForm.$dirty
For Field: myForm.firldName.$dirty
In CSS:
.ng-dirty{
 background-color: yellow;
}&lt;/p&gt;

&lt;p&gt;This is little bit information about the AngularJS form validation.
Use #ngvinod to discuss on Twitter about this.&lt;/p&gt;

&lt;p&gt;http://www.ng-vinod.com/2014/07/angularjs-pristine-dirty-valid-invalid.html&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Dec 2017 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2017/12/26/AngularJS-$pristine-$dirty-$valid-$invalid/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/26/AngularJS-$pristine-$dirty-$valid-$invalid/</guid>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>Amazon S3 Direct File Upload From Client Browser Private Key Disclosure</title>
        <description>&lt;h2 id=&quot;amazon-s3-direct-file-upload-from-client-browser---private-key-disclosure&quot;&gt;Amazon S3 direct file upload from client browser - private key disclosure&lt;/h2&gt;
&lt;p&gt;Create an Amazon S3 bucket and configure CORS
CORS needs to be configured on the Amazon S3 bucket to be accessed directly from JavaScript in the browser.
Navigate to the Amazon S3 console.
Choose an existing bucket or create a new bucket if desired. Note the bucket name and bucket region for later use in the application.&lt;/p&gt;

&lt;p&gt;Click the Properties tab, open the Permissions section, and click Edit CORS Configuration.&lt;/p&gt;

&lt;p&gt;Copy the below XML into the text box and click Save.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSConfiguration&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://s3.amazonaws.com/doc/2006-03-01&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSRule&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedOrigin&amp;gt;&lt;/span&gt;*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedOrigin&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;GET&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;PUT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;POST&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;DELETE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedHeader&amp;gt;&lt;/span&gt;*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedHeader&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSRule&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSConfiguration&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can upload files on AWS S3 using a server side solution, but in case of larger files it is advisable to use a client side solution. You can probably use JavaScript file upload feature of AWS S3. This is simple three step feature as described below:&lt;/p&gt;

&lt;p&gt;Step 1 : In the head section of your page include javascript sdk and specify your keys like this:&lt;/p&gt;

&lt;script src=&quot;https://sdk.amazonaws.com/js/aws-sdk-2.1.24.min.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    AWS.config.update({
        accessKeyId : 'ACCESS_KEY',
        secretAccessKey : 'SECRET_KEY'
    });
    AWS.config.region = 'AWS_REGION';
&lt;/script&gt;

&lt;p&gt;Step 2 : Now create a simple html form with a file input.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;form id=&quot;fileUploadForm&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&amp;gt;
&amp;lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; value=&quot;dataFile&quot; required=&quot;&quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Step 3 : Now upload your input file to S3&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&quot;#fileUploadForm&quot;).submit(function() {
var bucket = new AWS.S3({params: {Bucket: 'BUCKET_NAME'}});
var fileChooser = document.getElementById('file');
var file = fileChooser.files[0];
if (file) {
var params = {Key: 'FILE_NAME', ContentType: file.type, Body: file};
bucket.upload(params).on('httpUploadProgress', function(evt) {
console.log(&quot;Uploaded :: &quot; + parseInt((evt.loaded * 100) / evt.total)+'%');
}).send(function(err, data) {
alert(&quot;File uploaded successfully.&quot;);
});
}
return false;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To upload the file successfully, you need to enable CORS configuration on S3.&lt;/p&gt;

&lt;p&gt;Generally, it is not advisable to display your keys directly on page, so you can use Amazon Cognito or web identity federation feature.&lt;/p&gt;

&lt;p&gt;Using Cognito service&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;AWS S3 File Upload&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://sdk.amazonaws.com/js/aws-sdk-2.1.12.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file-chooser&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;upload-button&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Upload to S3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;results&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ap-south-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1. Enter your region&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CognitoIdentityCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;IdentityPoolId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ap-south-1:79a1d229-dd96-4c05-a7de-ef9d58976122'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2. Enter your identity pool&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucketName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test-marcom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Enter your bucket name&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucketName&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileChooser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'file-chooser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'upload-button'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'results'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileChooser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;objKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'testing/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;objKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;ContentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;ACL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'public-read'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;putObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ERROR: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;listObjs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Nothing to upload.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listObjs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'testing'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prefix&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ERROR: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;objKeys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;objKeys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;objKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 01 Jun 2017 00:00:00 +0600</pubDate>
        <link>http://localhost:4000/2017/06/01/amazon-s3-direct-file-upload-from-client-browser-private-key-disclosure/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/01/amazon-s3-direct-file-upload-from-client-browser-private-key-disclosure/</guid>
        
        
        <category>aws</category>
        
      </item>
    
  </channel>
</rss>
